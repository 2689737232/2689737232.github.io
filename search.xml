<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6模块化</title>
      <link href="/2020/09/07/es6-mo-kuai-hua/"/>
      <url>/2020/09/07/es6-mo-kuai-hua/</url>
      
        <content type="html"><![CDATA[<h4 id="浏览器环境中的导入导出"><a href="#浏览器环境中的导入导出" class="headerlink" title="浏览器环境中的导入导出"></a>浏览器环境中的导入导出</h4><blockquote><p><font color="red">需要开启liveserver</font>，不然会有跨域问题。</p></blockquote><pre class=" language-html"><code class="language-html">需要将type类型指定为module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./xxx/xxx<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h6 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h6><blockquote> <font color="red">一个模块，默认导出只能有一个</font></blockquote><pre class=" language-js"><code class="language-js">导出格式为 <span class="token punctuation">[</span><span class="token keyword">export</span> 声明、变量、函数或类声明。<span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span><span class="token keyword">let</span> xx <span class="token operator">=</span> <span class="token string">"xx"</span><span class="token punctuation">;</span><span class="token keyword">export</span> xx<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>默认导出<span class="token punctuation">,</span>只能导出一次。<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或export { Lala as default };</span><span class="token comment" spellcheck="true">// 在默认导出后面可以加值。 export 45;</span></code></pre><h6 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h6><pre class=" language-js"><code class="language-js">defa为默认导出的值。可以通过<span class="token keyword">as</span>指a将定名字为b。<span class="token keyword">import</span> defa<span class="token punctuation">,</span><span class="token punctuation">{</span>xxx<span class="token punctuation">,</span>a <span class="token keyword">as</span> b<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./xxx/xxx"</span><span class="token punctuation">;</span> </code></pre><p>如：</p><pre class=" language-js"><code class="language-js">导出文件<span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> xx <span class="token operator">=</span> <span class="token string">"love you"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> xx<span class="token punctuation">;</span>导入文件<span class="token keyword">import</span> defa<span class="token punctuation">[</span>默认导出的值<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> xx<span class="token punctuation">,</span> xxx <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./xx/xxx.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>defa<span class="token punctuation">,</span> xx<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意: 在函数或其他语句中不能使用<code>export</code> <code>import</code>。<br>如：if(xxx){ export xx; }  </p></blockquote><font color="#5b4aff">如果导入的文件有很多可以使用 <code>import * as xxx from &quot;./xxx&quot;;</code>全部导出。但是全部导出必须通过as重命名，因为不重命名没有名称。</font><br><font color="#5b792c">如果只是想导入,只是运行一个模块可以直接使用<code>import &quot;./xxx&quot;</code>。</font>  ]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 权威指南笔记 类型、运算符</title>
      <link href="/2020/06/23/js-quan-wei-zhi-nan-bi-ji/"/>
      <url>/2020/06/23/js-quan-wei-zhi-nan-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="前四章"><a href="#前四章" class="headerlink" title="前四章"></a>前四章</h3><h4 id="1-js的六大数据类型"><a href="#1-js的六大数据类型" class="headerlink" title="1. js的六大数据类型"></a>1. js的六大数据类型</h4><p>基本数据类型：  </p><ul><li>Number</li><li>String</li><li>Boolean  </li><li>Undefinde</li><li>Null</li><li>Object<br>JavaScript不区分整型和浮点型</li></ul><h4 id="2-js的垃圾回收机制"><a href="#2-js的垃圾回收机制" class="headerlink" title="2. js的垃圾回收机制"></a>2. js的垃圾回收机制</h4><p>自动的对内存进行垃圾回收，当创建的对象没有被引用的时候，解释器就会认为这个对象没有用了，然后就回收它。</p><h4 id="3-js中instanceof运算符"><a href="#3-js中instanceof运算符" class="headerlink" title="3. js中instanceof运算符"></a>3. js中instanceof运算符</h4><p>instanceof运算符的左边为一个对象右边为对象的类。如果左侧的对象是右侧类的实例的话返回true，否则返回false。<br><strong>并且,instanceof会对右侧类的父类进行检查。</strong></p><blockquote><p>如果左侧不是一个对象的话返回false；<br>  如果右侧不是一个函数的话会抛出一个类型错误。</p></blockquote><h4 id="4-逻辑与-amp-amp"><a href="#4-逻辑与-amp-amp" class="headerlink" title="4. 逻辑与 &amp;&amp;"></a>4. 逻辑与 &amp;&amp;</h4><p>先计算 “&amp;&amp;” 左侧的值，如果是假值整个表达式就为假，就直接返回左操作数的值，不会对右操作数进行计算。<br>如果左操作数的值为一个真值，那么整个表达式的值依赖右操作数的结果。  </p><blockquote><p>如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">45</span>               <span class="token comment" spellcheck="true">// 结果为0</span><span class="token number">45</span> <span class="token operator">&amp;&amp;</span> <span class="token number">100</span>             <span class="token comment" spellcheck="true">// 结果为45</span><span class="token number">45</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span>           <span class="token comment" spellcheck="true">// 结果为false</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span>     <span class="token comment" spellcheck="true">// 结果是 6</span><span class="token number">45</span> <span class="token operator">&amp;&amp;</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> <span class="token number">100</span>       <span class="token comment" spellcheck="true">// 结果为100</span></code></pre></blockquote><h4 id="5-逻辑或"><a href="#5-逻辑或" class="headerlink" title="5. 逻辑或 ||"></a>5. 逻辑或 ||</h4><p>和 “&amp;&amp;” 类似，“||”先计算左操作数的值为真就直接返回，否则看右边的值如果右边的也是一个假值，最后会返回右边的结果。</p><blockquote><p>如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">45</span> <span class="token operator">||</span> <span class="token number">0</span>               <span class="token comment" spellcheck="true">// 结果45</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token boolean">false</span>            <span class="token comment" spellcheck="true">// 结果false</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">45</span>           <span class="token comment" spellcheck="true">// 结果45</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">45</span> <span class="token operator">||</span> <span class="token number">100</span>    <span class="token comment" spellcheck="true">// 结果45</span></code></pre></blockquote><p>在函数中可以使用它来实现默认值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    p <span class="token operator">=</span> p <span class="token operator">||</span> <span class="token number">45</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果没有传入的参数p，默认在后面赋默认值45。</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h4 id="6-运算符typeof"><a href="#6-运算符typeof" class="headerlink" title="6. 运算符typeof"></a>6. 运算符typeof</h4><p>返回结果 ：  </p><ol><li>“undefined”</li><li>“object”</li><li>“boolean”</li><li>“number”</li><li>“string”</li><li>“function”</li><li>“symbol” es6新增</li></ol><h4 id="7-逗号操作符"><a href="#7-逗号操作符" class="headerlink" title="7. 逗号操作符"></a>7. 逗号操作符</h4><p>从左至右计算操作数，返回最后一个。</p><blockquote><p>如：</p><pre class=" language-javascript"><code class="language-javascript">i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>       <span class="token comment" spellcheck="true">// 结果为2</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript权威指南笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE组件子组件传值给父组件</title>
      <link href="/2019/09/04/vue-zu-jian-zi-zu-jian-chuan-zhi-gei-fu-zu-jian/"/>
      <url>/2019/09/04/vue-zu-jian-zi-zu-jian-chuan-zhi-gei-fu-zu-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="子组件向父组件通信、传递数据"><a href="#子组件向父组件通信、传递数据" class="headerlink" title="子组件向父组件通信、传递数据"></a>子组件向父组件通信、传递数据</h3><font><center>通过$children</center></font><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过ref拿到子组件的实例，进一步拿到子组件里面的值</span>            <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            yes<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span>                        data<span class="token punctuation">:</span> <span class="token string">"我是子组件的数据"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                template<span class="token punctuation">:</span> <span class="token string">"&lt;p >我是组件&lt;/p>"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><font><center>通过引用的方式</center></font><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 如果ref重名了，后面的会覆盖前面的。 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 如果<span class="token keyword">for</span>循环 <span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">"lala"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"...."</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>。$refs会用一个数组存放这个ref <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">"lala"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>yes ref<span class="token operator">=</span><span class="token string">'yes'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过ref拿到子组件的实例，进一步拿到子组件里面的值</span>            <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>yes<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            yes<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span>                        data<span class="token punctuation">:</span> <span class="token string">"我是子组件的数据"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                template<span class="token punctuation">:</span> <span class="token string">"&lt;p >我是组件&lt;/p>"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><font><center>通过子组件内部事件</center></font></p><pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定函数 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>yes <span class="token punctuation">:</span>func<span class="token operator">=</span><span class="token string">"func"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        yes<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过属性拿到父组件的方法</span>            props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">:</span> <span class="token string">"我是子组件的数据"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token string">"&lt;button @click='innerFunc'>点击&lt;/button>"</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 通过子组件的方法触发父组件的方法</span>                <span class="token function">innerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// props里面的属性可以直接拿来用。挂载到这个组件上面的</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><font><center>通过子组件事件 $listeners</center></font></p><pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 在子组件身上绑定事件 因为非原生dom点击yes元素func不会触发<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>yes @click<span class="token operator">=</span><span class="token string">"func"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        yes<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">:</span> <span class="token string">"我是子组件的数据"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token string">"&lt;button @click='innerFunc'>点击&lt;/button>"</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">innerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果在子组件上面通过v-on绑定事件，会记录到实例上的 $listeners 属性上。</span>                    <span class="token comment" spellcheck="true">//相当于执行了父组价里面的click方法</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>$listeners<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//也可以使用 $emit触发</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE组件</title>
      <link href="/2019/09/03/vue-zu-jian/"/>
      <url>/2019/09/03/vue-zu-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue中组件的使用"><a href="#Vue中组件的使用" class="headerlink" title="Vue中组件的使用"></a>Vue中组件的使用</h3><p>全局组件的定义</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>yes<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'yes-com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            data<span class="token punctuation">:</span> <span class="token string">"我是data"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{data}}&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>局部组件的定义</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用的时候还是用连字符的方式 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 优先使用局部组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>yes<span class="token operator">-</span>com a<span class="token operator">=</span><span class="token string">"自定义的prop"</span> b<span class="token operator">=</span><span class="token string">"自定义"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//全局</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-conponet'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一个组件的 data 选项必须是一个函数。因此每个实例可以维护一份被返回对象的独立的拷贝：</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        data<span class="token punctuation">:</span><span class="token string">"我是数据"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span><span class="token string">'&lt;div>{{data}}&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//局部组件定义</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>        yesCom<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果需要用到prop,要在组件的props里面注册</span>            props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//如果需要对prop做限制处理,可以把props写成一个对象的形式</span>            <span class="token comment" spellcheck="true">// props:{</span>            <span class="token comment" spellcheck="true">//   a:{</span>            <span class="token comment" spellcheck="true">//      type:Number,</span>            <span class="token comment" spellcheck="true">//      required:true</span>            <span class="token comment" spellcheck="true">//      default:"我是默认值"</span>            <span class="token comment" spellcheck="true">//   }</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">:</span><span class="token string">"我是局部组件的数据"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。  </span>            <span class="token comment" spellcheck="true">// 在上述模板中，你会发现我们能够在组件实例中访问这个值，就像访问data 中的值一样。</span>            template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{data}}{{a}}&lt;/div>'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><a href="https://cn.vuejs.org/v2/guide/components-props.html" target="_blank" rel="noopener">prop相关<a></a></a></p><p><font size="5">组件之间的数据传递</font></p><p><font><center>$attrs</center><font></font></font></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>first<span class="token operator">-</span>com <span class="token punctuation">:</span>title<span class="token operator">=</span><span class="token string">"title"</span> <span class="token punctuation">:</span>content<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>first<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">"我是标题"</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token string">"我是内容"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        firstCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>            props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//在模板字符串中使用  this.$attrs.content 获取没有注册的prop属性。</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>                            {{title}}                               &lt;second-com :content="this.$attrs.content"> &lt;/second-com>                        &lt;/div>`</span></span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 不显示没有注册的属性，content就不会显示到first-com元素上面</span>            inheritAttrs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                secondCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    template<span class="token punctuation">:</span> <span class="token string">"&lt;div>{{content}}&lt;/div>"</span><span class="token punctuation">,</span>                    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><font><center>$parent方式</center><font></font></font></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">"我是标题"</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token string">"我是内容"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        firstCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>            props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>                            {{title}}                            &lt;second-com> &lt;/second-com>                        &lt;/div>`</span></span><span class="token punctuation">,</span>            inheritAttrs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                secondCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 通过实例上面的$parent查找</span>                    template<span class="token punctuation">:</span> <span class="token string">"&lt;div>{{this.$parent.$parent.content}}&lt;/div>"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><font><center>Provide inject方式</center><font></font></font></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>first<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>first<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//提供</span>    provide<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">"我是标题"</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token string">"我是内容"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        firstCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注入</span>            inject<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>                        {{title}}                        &lt;second-com>&lt;/second-com>                        &lt;/div>`</span></span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                secondCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//注入</span>                    inject<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    template<span class="token punctuation">:</span> <span class="token string">"&lt;div>{{content}}&lt;/div>"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE的生命周期函数</title>
      <link href="/2019/09/02/vue-de-sheng-ming-zhou-qi-han-shu/"/>
      <url>/2019/09/02/vue-de-sheng-ming-zhou-qi-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="VUE实例的生命周期图"><a href="#VUE实例的生命周期图" class="headerlink" title="VUE实例的生命周期图"></a>VUE实例的生命周期图</h3><p><img src="&quot;lifecycle.png&quot;" alt="生命周期图"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>yes<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建前 没有这个值</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>yes<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我在创建前面被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>yes<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我在创建前面被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//添加到DOM上时</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//更新前执行</span>    <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>yes <span class="token operator">=</span> <span class="token string">"455"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这里是更新前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果在这里面赋值会死循环一直updated（）</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我快要被销毁了，我不想死啊(;´༎ຶД༎ຶ`)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我被销毁了(ノへ￣、),再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        yes<span class="token punctuation">:</span> <span class="token string">"啦啦"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="&quot;生命周期函数.JPG&quot;" alt="生命周期图"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE自定义指令</title>
      <link href="/2019/09/01/vue-zi-ding-yi-zhi-ling/"/>
      <url>/2019/09/01/vue-zi-ding-yi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="定义全局指令"><a href="#定义全局指令" class="headerlink" title="定义全局指令"></a>定义全局指令</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 全局指令。两个被Vue管理的元素都可以使用slice指令 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>slice<span class="token operator">=</span><span class="token string">"content"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>slice<span class="token operator">=</span><span class="token string">"content"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// 定义全局的指令  第一个参数是指令名字。在使用的时候需要写成 v-指令名字。</span><span class="token comment" spellcheck="true">// 第二个参数是一个对象，里面的是钩子函数。</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'slice'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//指令第一次绑定到元素上面时执行</span>    <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一次绑定执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//绑定数据更新时执行</span>    <span class="token function">update</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//被插入到父节点中时执行，用于保证父节点存在，不能保证插入文档中</span>    <span class="token function">inserted</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我插入父节点中了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//指令所在组件的 VNode 及其子 VNode 全部更新后调用。</span>    <span class="token function">componentUpdated</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//只调用一次，指令与元素解绑时调用。</span>    <span class="token function">unbind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">"我是content哦"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app1"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">"那我是content1 ~QWQ~"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果只是关心 bind 和 update这两个钩子函数可以简写为这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>slice<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>slice<span class="token operator">=</span><span class="token string">"content1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//directive这里面的第二个参数是一个函数，是bind 和 update的结合。第一次绑定到元素身上时触发，数据更新时候触发</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'slice'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> bindings<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> bindings<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">"我是content哦"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app1"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content1<span class="token punctuation">:</span> <span class="token string">"那我是content1 ~QWQ~"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="定义局部指令"><a href="#定义局部指令" class="headerlink" title="定义局部指令"></a>定义局部指令</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">"我是content"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指令的定义。 也有这些钩子函数，也可以简写 bind update</span>        yes<span class="token punctuation">:</span> <span class="token punctuation">{</span>            inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>                el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="钩子函数中的参数"><a href="#钩子函数中的参数" class="headerlink" title="钩子函数中的参数"></a>钩子函数中的参数</h3><p><center><font size="4">钩子函数中的参数有el、bing、vnode、onVonde。</font></center></p><p><font face="幼圆"><br>    el：指令所绑定的元素，可以用来直接操作 DOM 。<br>    binding：一个对象，包含以下属性：<br>    &emsp;name：指令名，不包括 v- 前缀。<br>    &emsp;value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。<br>    &emsp;oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。<br>    &emsp;expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。<br>    &emsp;arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。<br>    &emsp;modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。<br>    vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。<br>    oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。<br></font><br><img src="./全局指令.JPG" alt="VUE自定义指令"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE指令2</title>
      <link href="/2019/08/30/vuej-zhi-ling-2/"/>
      <url>/2019/08/30/vuej-zhi-ling-2/</url>
      
        <content type="html"><![CDATA[<h3 id="v-bind-类名-src等数据绑定的时候"><a href="#v-bind-类名-src等数据绑定的时候" class="headerlink" title="v-bind 类名 src等数据绑定的时候"></a>v-bind 类名 src等数据绑定的时候</h3><font size="5">图片的显示</font><br><font color="ff0000">v-bind可以简写为 “:” </font><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img v<span class="token operator">-</span>bind<span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        img<span class="token punctuation">:</span><span class="token string">"http://5b0988e595225.cdn.sohucs.com/q_70,c_zoom,w_640/images/20180314/f15d71681dbf4bcc8b33fe261d3820db.gif"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><font size="5">类名的添加</font><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"c"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        c<span class="token punctuation">:</span><span class="token string">"yes"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./class添加.JPG" alt="Class添加"></p><p>如果有多个类名，需要写在[]里面</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"[c1,c2]"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        c1<span class="token punctuation">:</span><span class="token string">"yes"</span><span class="token punctuation">,</span>        c2<span class="token punctuation">:</span><span class="token string">"no"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./多个class.JPG" alt="多个class"></p><p>通过{}进行运算</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> yes是添加的类名，后面的isAdd进行判断是否添加 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{yes:isAdd}"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        c<span class="token punctuation">:</span><span class="token string">"yes"</span><span class="token punctuation">,</span>        isAdd<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./运算.JPG" alt="运算"></p><p><font size="5">style的添加</font><br>如果是添加style里面的一个样式可以这样写：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"{width:'500px',height:'500px',backgroundColor:bgColor}"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        bgColor<span class="token punctuation">:</span><span class="token string">"yellow"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./style添加.JPG" alt="style添加"></p><p>如果有多个style样式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>需要通过 <span class="token string">"[]"</span> 添加<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"[style1,style2]"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        style1<span class="token punctuation">:</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span>500px<span class="token punctuation">,</span>height<span class="token punctuation">:</span>500px<span class="token punctuation">,</span>backgroundColor<span class="token punctuation">:</span>yellow<span class="token punctuation">}</span><span class="token punctuation">,</span>        style2<span class="token punctuation">:</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span>100px<span class="token punctuation">,</span>height<span class="token punctuation">:</span>100px<span class="token punctuation">,</span>backgroundColor<span class="token punctuation">:</span>blue<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./多个style样式.JPG" alt="多个style"></p><h3 id="v-on-VUE中事件的绑定"><a href="#v-on-VUE中事件的绑定" class="headerlink" title="v-on VUE中事件的绑定"></a>v-on VUE中事件的绑定</h3><p><font color="ff0000">v-on:可以简写为 “@” </font></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>on<span class="token punctuation">:</span>click<span class="token operator">=</span><span class="token string">"click"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data里面也可以写是上这个函数。但是这里面的this指向window</span>        <span class="token comment" spellcheck="true">// click(){</span>        <span class="token comment" spellcheck="true">//     console.log("yes,我被点击了")</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//事件函数写在里面</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里面的this指向实例vm</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"yes,我被点击了"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE指令</title>
      <link href="/2019/08/29/vue-zhi-ling/"/>
      <url>/2019/08/29/vue-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="v-pre-如果有元素不想被Vue渲染的话，可以加上这个指令"><a href="#v-pre-如果有元素不想被Vue渲染的话，可以加上这个指令" class="headerlink" title="v-pre 如果有元素不想被Vue渲染的话，可以加上这个指令"></a>v-pre 如果有元素不想被Vue渲染的话，可以加上这个指令</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>pre<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//这里就不会显示yes了，显示{{a}}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token string">"yes"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="v-once-只渲染第一次的值，以后的值更改不会再渲染。"><a href="#v-once-只渲染第一次的值，以后的值更改不会再渲染。" class="headerlink" title="v-once  只渲染第一次的值，以后的值更改不会再渲染。"></a>v-once  只渲染第一次的值，以后的值更改不会再渲染。</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>pre<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token string">"yes"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">"no"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./image/v-once.JPG" alt="v-once">;</p><h3 id="v-html-可能从后台拿回来的值是字符串，v-html可以当成元素插入。相当于innerHtml"><a href="#v-html-可能从后台拿回来的值是字符串，v-html可以当成元素插入。相当于innerHtml" class="headerlink" title="v-html 可能从后台拿回来的值是字符串，v-html可以当成元素插入。相当于innerHtml"></a>v-html 可能从后台拿回来的值是字符串，v-html可以当成元素插入。相当于innerHtml</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>html<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token string">"&lt;p>我是段落yes！！！&lt;/p>"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="v-text-同理-相当于innerText"><a href="#v-text-同理-相当于innerText" class="headerlink" title="v-text 同理 相当于innerText"></a>v-text 同理 相当于innerText</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>       里面的值不会显示，因为等同于innerText     <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token string">"我是段落yes！！！"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="v-if-v-else-if-v-else"><a href="#v-if-v-else-if-v-else" class="headerlink" title="v-if v-else-if  v-else"></a>v-if v-else-if  v-else</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>       为<span class="token boolean">true</span>显示    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>用一个标签控制多个标签的显示隐藏</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>   <span class="token comment" spellcheck="true">//这层div没有意义，但是多出来在理解上不是特别好</span>       <span class="token operator">&lt;</span>div<span class="token operator">></span>我显示了<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span>div<span class="token operator">></span>我也显示了<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>Vue提供了<span class="token operator">&lt;</span>template<span class="token operator">></span>标签。这个标签没有任何意义，微信小程序的block也是。在<span class="token keyword">if</span>的时候可以用到。在渲染后，这个<span class="token operator">&lt;</span>template<span class="token operator">></span>是不存在网页中的。<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>我显示了<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span>div<span class="token operator">></span>我也显示了<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>v-else</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>       显示<span class="token boolean">true</span>的时候    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>       显示<span class="token boolean">false</span>的时候    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>v-else-if</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a == 0"</span><span class="token operator">></span>       显示a为<span class="token number">0</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a == 1"</span><span class="token operator">></span>       显示a为<span class="token number">1</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>       显示a为其他    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="v-show类似于v-if。但是在template上不生效-w-ﾟДﾟ-w"><a href="#v-show类似于v-if。但是在template上不生效-w-ﾟДﾟ-w" class="headerlink" title="v-show类似于v-if。但是在template上不生效 w(ﾟДﾟ)w"></a>v-show类似于v-if。但是在template上不生效 w(ﾟДﾟ)w</h3><p>和v-if的区别，如果if的条件不成立，是不会渲染进页面的，会用一个注释<!---->代替。<br>而v-show尽管条件不成立，但是在页面结构中还是存在。改变的是css样式display：none。<br>在微信小程序中的规则也差不多。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>       显示a了    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE基础 笔记</title>
      <link href="/2019/08/29/vue-ji-chu-bi-ji/"/>
      <url>/2019/08/29/vue-ji-chu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="VUE基础-实例方法"><a href="#VUE基础-实例方法" class="headerlink" title="VUE基础  实例方法"></a>VUE基础  实例方法</h2><h3 id="对对象和数组的渲染时"><a href="#对对象和数组的渲染时" class="headerlink" title="对对象和数组的渲染时"></a>对对象和数组的渲染时</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>arr<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>            arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>                a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>                b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>                c<span class="token punctuation">:</span> <span class="token string">"c"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果–arr.length，页面是不会进行刷新渲染。<br><img src="./image/长度操作.JPG" alt="操作长度"></p><p>如果通过数组的下标操作也不会改变。<br><img src="./image/下标操作.JPG" alt="操作长度"></p><p>如果使用了一个对象没有的属性值，会返回undefined。在视图中不会显示。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>obj<span class="token punctuation">.</span>yes<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//没有这个属性值，不显示</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>            arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>                a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>                b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>                c<span class="token punctuation">:</span> <span class="token string">"c"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>     </code></pre><p>如果再添加上这个值的话，页面上是不会渲染的。<br><img src="./image/对象操作.JPG" alt="操作长度"></p><h3 id="针对上面的情况可以使用-VUE的-set解决"><a href="#针对上面的情况可以使用-VUE的-set解决" class="headerlink" title="针对上面的情况可以使用 VUE的$set解决"></a>针对上面的情况可以使用 VUE的$set解决</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>arr<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>            arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>                a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>                b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>                c<span class="token punctuation">:</span> <span class="token string">"c"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        </code></pre><p> <img src="./image/$set.JPG" alt="操作长度">  </p><h3 id="el"><a href="#el" class="headerlink" title="$el"></a>$el</h3><p> 通过Vue实例.$el获取操作的元素。<br> app.$el 相当于 document.getElementById(‘app’) </p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>obj<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>            b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>            c<span class="token punctuation">:</span> <span class="token string">"c"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p> <img src="./image/$el.JPG" alt="$el"></p><p>更改数据，然后打印。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>obj<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>            b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>            c<span class="token punctuation">:</span> <span class="token string">"c"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">"aaaa"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">"bbbb"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">"cccc"</span><span class="token punctuation">;</span></code></pre><p>页面上数据已经更改但是，打印的却不一样。<br><img src="./image/$el2.JPG" alt="$el"><br>因为VUE在数据的渲染上面是，异步操作。可利用定时器等操作查看</p><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h3><p>这个方法是在数据渲染完成后，触发这个方法。接受一个参数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>obj<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>            b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>            c<span class="token punctuation">:</span> <span class="token string">"c"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">"aaaa"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">"bbbb"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">"cccc"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./image/$nextTick.JPG" alt="$el"></p><h3 id="mount"><a href="#mount" class="headerlink" title="$mount"></a>$mount</h3><p>挂载方法，在实例化一个vue对象时，可以不用写el。<br>在获取这个对象的时候通过$mount添加</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>obj<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//el: "#app",</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>            b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>            c<span class="token punctuation">:</span> <span class="token string">"c"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础</title>
      <link href="/2019/08/22/vue-ji-chu/"/>
      <url>/2019/08/22/vue-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要用vue？"><a href="#为什么要用vue？" class="headerlink" title="为什么要用vue？"></a>为什么要用vue？</h2><p>  因为vue的性能好，数据视图分离的MVVM框架。</p><h2 id="为什么操作DOM会消耗性能"><a href="#为什么操作DOM会消耗性能" class="headerlink" title="为什么操作DOM会消耗性能"></a>为什么操作DOM会消耗性能</h2><p>  <font face="幼圆" color="FF0000">操作DOM是非常消耗性能的。</font><br><br>  DOM是操作XML和HTML文档的接口。<br>  JS和DOM是两种东西，每次连接要消耗性能。操作DOM会导致重绘和重排。<br>  那重绘和重排</p><h3 id="浏览器的渲染过程"><a href="#浏览器的渲染过程" class="headerlink" title="浏览器的渲染过程"></a>浏览器的渲染过程</h3><p>   每一次请求完HTML CSS  JavaScript 图片等等…<br>   浏览器会先解析HTML形成DOMTree<br>   然后解析CSS形成CSSTree<br>   这个解析过程是是深度优先，<br>   然后合并DOMTree和CSSTree形成renderTree。<br>   根据这个renderTree开始布局、绘制。</p><h3 id="重绘和重排"><a href="#重绘和重排" class="headerlink" title="重绘和重排"></a>重绘和重排</h3><p>   操作DOM，更改了元素的一些属性，宽高…这会影响其他的元素的布局属性。<br>   浏览器会使渲染树中的影响部分失效，重绘渲染树。这个称为重排。<br>   重排后，浏览器会重新绘制受影响的部分到屏幕中。这个称为重绘。</p><h2 id="VUE的性能为什么会更好"><a href="#VUE的性能为什么会更好" class="headerlink" title="VUE的性能为什么会更好"></a>VUE的性能为什么会更好</h2><p>   VUE的核心是操作虚拟DOM(virtual dom或者vdom)，使用这个虚拟DOM会减少对DOM的操作。<br>   是由js模拟的一个虚拟DOM。<br>   模拟出来虚拟DOM以</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue基础 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 箭头函数</title>
      <link href="/2019/08/13/es6-jian-tou-han-shu/"/>
      <url>/2019/08/13/es6-jian-tou-han-shu/</url>
      
        <content type="html"><![CDATA[<p><font face="黑体" color="green" size="8">ES6箭头函数</font><br><br><br> ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><h3 id="箭头函数的特点"><a href="#箭头函数的特点" class="headerlink" title="箭头函数的特点"></a>箭头函数的特点</h3><pre><code> 1 不能加function关键字 2 只能作为函数使用、没有原型、不能new 3 参数不能重复命名 4 arguments 和 this 由定义时的外层最接近一层的非箭头函数决定</code></pre><h3 id="箭头函数的写法"><a href="#箭头函数的写法" class="headerlink" title="箭头函数的写法"></a>箭头函数的写法</h3><pre class=" language-JavaScript"><code class="language-JavaScript">  let func = (param1,param2) => {      let sum = param1 + param2;      return sum;  }</code></pre><h3 id="与ES5函数写法的不同"><a href="#与ES5函数写法的不同" class="headerlink" title="与ES5函数写法的不同"></a>与ES5函数写法的不同</h3><pre class=" language-JavaScript"><code class="language-JavaScript">    function sum(a, b) {        return a + b;    }    let sum = (a,b) =>{        return a + b;    }    //如果方法体里面只有return ...;可以去掉{}去掉return    let sum = (a,b) => a + b    //当要返回一个对象的时候    let obj = (a,b) => {_a:a,_b:b}   //这样写不可以在es6中 {} 为语句块    let obj = (a,b) => ( {_a:a,_b:b} )  //需要加括号转成表达式    //连续的返回    let sum = (x) => (y) => (z) => x + y + z;    console.log(sum(1)(2)(3));</code></pre><h3 id="箭头函数中this的指向和arguments问题"><a href="#箭头函数中this的指向和arguments问题" class="headerlink" title="箭头函数中this的指向和arguments问题"></a>箭头函数中this的指向和arguments问题</h3><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-箭头函数中使用的this，arguments。是由箭头函数定义时-外层最接近的非箭头函数里的this和arguments决定"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-箭头函数中使用的this，arguments。是由箭头函数定义时-外层最接近的非箭头函数里的this和arguments决定" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;箭头函数中使用的this，arguments。是由箭头函数定义时,外层最接近的非箭头函数里的this和arguments决定"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;箭头函数中使用的this，arguments。是由<font face="黑体" color="#c24106" size="4">箭头函数定义时,外层最接近的非箭头函数里的this和arguments决定</font></h4><pre class=" language-JavaScript"><code class="language-JavaScript">   //这里outerFunc在window下定义   function outerFunc(a,b){       let innerFunc = () =>{           console.log(arguments[0], arguments[1], this);       }       innerFunc();   }   outerFunc(1,2);   //打印结果为： 1  2  window</code></pre><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-如果在外面再套一层"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-如果在外面再套一层" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果在外面再套一层"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果在外面再套一层</h4><pre class=" language-JavaScript"><code class="language-JavaScript">    let obj = {    }    function wrapFunc(c, d) {        function outerFunc(a, b) {            let innerFunc = () => {                console.log(arguments[0], arguments[1], this);            }            //给obj添加方法            obj._innerFunc = innerFunc;        }        outerFunc(1,2);    }    wrapFunc(3,4);    //执行箭头函数    obj._innerFunc(5,6);   结果为 1 2 window还是箭头函数定义时outerFunc(a,b)的this和arguments</code></pre><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-再来"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-再来" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再来"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再来</h4><pre class=" language-JavaScript"><code class="language-JavaScript">   var obj = {        a : function(){            console.log(this);        },        b : () => console.log(this)    }    obj.a();    obj.b();    最后结果为 obj  window</code></pre><h3 id="尾调用-递归（优化过程）"><a href="#尾调用-递归（优化过程）" class="headerlink" title="尾调用 递归（优化过程）"></a>尾调用 递归（优化过程）</h3><pre class=" language-JavaScript"><code class="language-JavaScript">  //p = 1是默认值操作  a = (n,p=1) => {    if(n <= 1){        return 1 * p;    }    let s = n * p;    return a(n-1,s);   }   let sum = a(3)   console.llog(sum) 结果为6</code></pre><h3 id="利用箭头函数对数组进行操作"><a href="#利用箭头函数对数组进行操作" class="headerlink" title="利用箭头函数对数组进行操作"></a>利用箭头函数对数组进行操作</h3><pre class=" language-JavaScript"><code class="language-JavaScript">     let arr = [25, 64, 45, 123, 456, 845, 78];     //相对于es5来说简单了不少     console.log(arr.map((ele) => ele < 50));     console.log(arr.filter((ele) => ele > 50));</code></pre>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 箭头函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js线程问题</title>
      <link href="/2019/08/08/js-xian-cheng-wen-ti/"/>
      <url>/2019/08/08/js-xian-cheng-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="js是单线程语言"><a href="#js是单线程语言" class="headerlink" title="js是单线程语言"></a>js是单线程语言</h2><p>这个单线程是有影响的。比如上一句代码没有执行到，那么下一句就不会执行，浏览器就会显示一直在加载。</p><pre class=" language-JavaScript"><code class="language-JavaScript">for(var i = 0;i<10;i++){    console.log(i);}console.log("yes");打印顺序就是for循环走完后，再打印yes</code></pre><p>但是在开发中是有一些耗时操作的，比如ajax请求，定时器等等。这个时候出现了异步模式。</p><pre class=" language-JavaScript"><code class="language-JavaScript">setTimeout(function(){    console.log("我是定时器一号");},200);setTimeout(function(){    console.log("我是定时器二号");},100);console.log("yes");setTimeout是异步操作，这些耗时操作不是在js主线程里面执行，而是放到了任务队列（可以理解为是异步线程）里面去。等到主线程执行完后再来执行任务队列里面的事情，并且是挨个处理。所以这里打印的是 yes  我是定时器二号  我是定时器一号在js中，定时器 ajax请求 事件 回调函数 发布订阅模式 es6中的Promise、Generrator等等都是异步操作。</code></pre><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>相当于一个列表，里面的任务又分为宏任务、微任务。<br>任务队列的读取方式：先进先出 后进后出。</p><h3 id="宏任务-task-macrotask"><a href="#宏任务-task-macrotask" class="headerlink" title="宏任务 task(macrotask)"></a>宏任务 task(macrotask)</h3><p> 1.DOM操作 2.定时器 3.ajax…</p><h3 id="微任务-task-macrotask"><a href="#微任务-task-macrotask" class="headerlink" title="微任务 task(macrotask)"></a>微任务 task(macrotask)</h3><p> 1.Promise 2.</p><pre class=" language-JavaScript"><code class="language-JavaScript">后放入宏任务中setTimeout(function(){    console.log("我是定时器一号");},200);先放入宏任务中setTimeout(function(){    console.log("我是定时器二号");},100);放入call stack（函数执行栈，代码执行放入里面）中的Global EC（函数执行上下文）中。console.log("yes");函数执行是在Global EC里执行在Global EC 只有console.log("yes");  执行，然后先看微任务中有没有。有的话将任务加到Global EC中先后执行再弹出call stack，看完微任务后看宏任务，再添加执行。</code></pre><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>例子1</p><pre class=" language-JavaScript"><code class="language-JavaScript">setTimeout(function(){    console.log("定时器1");},200);setTimeout(function(){    console.log("定时器2");},100);es6中的Promisenew Promise(function(resolve){    console.log("Promise1");       resolve();    console.log("Promise2");  }).then(function(){    console.log("then");})console.log("yes");最后打印顺序为    Promise1 Promise2 yes then 定时器2 定时器1</code></pre><p>例子2</p><pre class=" language-JavaScript"><code class="language-JavaScript">setTimeout(function(){    console.log("1")},100)new Promise(function(resolve){  console.log(2)  for(var i = 0; i < 601;i++){      i === 600 && resolve(3);  }  console.log(4)}).then(function(val){  console.log(val)})console.log(5)最后打印顺序为 24531</code></pre><h2 id="利用任务队列解决问题"><a href="#利用任务队列解决问题" class="headerlink" title="利用任务队列解决问题"></a>利用任务队列解决问题</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>js是单线程语言，异步操作放到任务队列里面。而任务队列分为宏任务和微任务。<br>最后执行先执行Global EC里面的，然后是微任务里面的，最后是宏任务里面的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js基础 线程 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo server无效</title>
      <link href="/2019/08/08/hexo-server-wu-xiao/"/>
      <url>/2019/08/08/hexo-server-wu-xiao/</url>
      
        <content type="html"><![CDATA[<p><img src="&quot;./ckrj.jpg&quot;" alt="采坑日记"></p><p> 因为hexo基于node 没有安装依赖需要执行 <code>npm install</code><br> <code>npm install</code> 会去找项目文件夹中的 <code>package.json</code> 这个文件安装里面的配置</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 采坑日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
