<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js加载时间线</title>
      <link href="/2021/04/12/js-jia-zai-shi-jian-xian/"/>
      <url>/2021/04/12/js-jia-zai-shi-jian-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-js加载时间线"><a href="#1-js加载时间线" class="headerlink" title="1.js加载时间线"></a>1.js加载时间线</h3><blockquote><p>参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/readyState" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/readyState</a></p></blockquote><ul><li><p>创建Document对象，开始解析web页面,document仍在加载。这个阶段<font color="red"><code>document.readyState = &quot;loading&quot;</code></font> 。  </p></li><li><p>遇到link外部的css文件，创建新的线程进行加载，并开始解析。 </p></li><li><p>遇到<code>script</code>文件 没有设置 <code>async</code>或<code>defer</code>的js文件会同步加载js文件，会阻塞浏览器对文件的解析。js文件加载完后继续解析文档。<br>遇到的有<code>async</code>或<code>defer</code>浏览器创建新的线程加载文件，入果是<code>async</code>的文件，加载完后就执行；而<code>defer</code>会在文档全部解析完后执行。</p></li><li><p>遇到img先加载dom结构、解析文档，后开启线程去异步加载src资源。</p></li><li><p>文档已被解析，dom元素可以访问。”正在加载”状态结束，如图像，样式表和框架之类的子资源可能仍在加载。 <font color="red"><code>document.readyState = &quot;interactive&quot;</code></font> </p></li><li><p>然后按顺序执行 defer的脚本文件。</p></li><li><p>所有的<code>defer</code>文档都执行完毕（defer中的异步任务不影响）、img加载完毕后， <font color="red"><code>document.readyState = &quot;loaded&quot;</code></font> 。 <code>window</code>触发onload事件。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js基础 线程 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用层</title>
      <link href="/2021/04/06/ying-yong-ceng/"/>
      <url>/2021/04/06/ying-yong-ceng/</url>
      
        <content type="html"><![CDATA[<h4 id="1-进程通信"><a href="#1-进程通信" class="headerlink" title="1. 进程通信"></a>1. 进程通信</h4><p>通过跨越计算机网络交换<strong>报文</strong>，而相互通信。发送进程生成并向网络中发送报文；接收方接收这些报文并尽可能进行回报文响应。</p><h5 id="1-1-客户和服务进程"><a href="#1-1-客户和服务进程" class="headerlink" title="1.1 客户和服务进程"></a>1.1 客户和服务进程</h5><p>将两个进程之一称为<strong>客户(client)</strong>，而另一个进程称为<strong>服务器(server)</strong>。</p><blockquote><p>在一对进程之间的通信会话场景之中，发起通信的进程被称为<strong>客户</strong>，在会话开始时等待联系的进程是<strong>服务器</strong>。</p></blockquote><h5 id="1-2-进程与计算机网络之间的接口"><a href="#1-2-进程与计算机网络之间的接口" class="headerlink" title="1.2 进程与计算机网络之间的接口"></a>1.2 进程与计算机网络之间的接口</h5><p>每对中的两个进程互相发报文，从一个进程向另一个进程发送的报文必须通过下面的网络。<br>进程通过一个称为<strong>套接字socket</strong>的软件向网络发送和从网络接收报文。 </p><blockquote><p>套接字也称为应用程序和网络之间的API。应用程序开发者可以控制应用层端的一切。<br>对于该套接字的运输层的控制权只有选中运输协议、设定运输层参数、最大缓存、最大报文长度等。</p></blockquote><h5 id="1-3-进程寻址"><a href="#1-3-进程寻址" class="headerlink" title="1.3 进程寻址"></a>1.3 进程寻址</h5><p>为了标识一个接收进程，需要定义两种信息：IP地址和端口。</p><h4 id="2-可供应用程序选择的运输服务"><a href="#2-可供应用程序选择的运输服务" class="headerlink" title="2.可供应用程序选择的运输服务"></a>2.可供应用程序选择的运输服务</h4><p>一个运输层协议能够为调用它的应用程序提供大致4个服务分类：1.可靠数据传输 2.吞吐量 3.定时 4.安全性</p><h5 id="2-1-可靠数据传输"><a href="#2-1-可靠数据传输" class="headerlink" title="2.1 可靠数据传输"></a>2.1 可靠数据传输</h5><p>分组在计算机网络中很可能丢失，但是一些应用必须保证传输的数据保持完整。如果一个协议提供了数据交付服务就认为提供了<strong>可靠数据传输（Reliable Data Transfer）</strong>。<br>当一个运输层协议不提供可靠数据传输时，某些数据到不了接收进程，这可能被容忍丢失的应用所接受，如音频、视频。</p><h5 id="2-2-吞吐量"><a href="#2-2-吞吐量" class="headerlink" title="2.2 吞吐量"></a>2.2 吞吐量</h5><p>可用吞吐量就是发送进程能够向接受进程交付的比特率。因为还有其他的应用共享带宽，所以可用吞吐量会随时间变化。运输层协议能够以特定的速率提供确保的可用吞吐量。  </p><blockquote><p>具有吞吐量要求的应用程序被称为<strong>带宽敏感的应用</strong>。<br>根据当时可用的带宽或多或少的利用可供的吞吐量，被称为<strong>弹性应用</strong>。</p></blockquote><h5 id="2-3-定时"><a href="#2-3-定时" class="headerlink" title="2.3 定时"></a>2.3 定时</h5><p>运输层协议也可以像吞吐量保证那样提供定时服务。<br>如，发送方注入到套接字中的每个比特到达接收方的套接字不迟于100ms，这在一些游戏中常见。</p><h5 id="2-4-安全性"><a href="#2-4-安全性" class="headerlink" title="2.4 安全性"></a>2.4 安全性</h5><p>运输层协议能够为应用程序提供一种或多种的安全性服务。<br>如发送时加密接收时解密。 </p><h4 id="3-因特网提供的运输服务"><a href="#3-因特网提供的运输服务" class="headerlink" title="3.因特网提供的运输服务"></a>3.因特网提供的运输服务</h4><h5 id="3-1-TCP服务"><a href="#3-1-TCP服务" class="headerlink" title="3.1 TCP服务"></a>3.1 TCP服务</h5><p>TCP服务包括了<strong>面向连接的服务</strong>和<strong>可靠数据传输服务</strong>。当某个应用程序调用TCP作为运输协议时，该应用程序就可以获得TCP的这两种服务。  </p><blockquote><p><strong>面向连接服务：</strong><br>在应用层报文流动前，TCP让客户和服务器互相交换运输层控制信息。这个所谓的握手的过程提醒客户和服务器让他们为大量分组的到来做好准备。<br>在握手后一个<strong>TCP连接(TCP connection)</strong>就在两个进程的套接字之间建立了，这条连接是全双工的，即双方都可以在此连接上进行收发报文。 </p></blockquote><blockquote><p><strong>可靠的数据传输服务:</strong><br>通信的进程能够依靠TCP无差错按适当顺序交付所有发送的数据。当应用程序的一端将字节流传入套接字，它能依靠TCP相同的字节流交付给对方的套接字，而没有字节的丢失和冗余。  </p></blockquote><p>TCP还具有拥塞控制机制，当发送方和接收方之间的网络出现拥塞时，TCP会遏制发送进程。<br>TCP拥塞机制也会试图限制每个TCP连接，使他们达到共享带宽的目的。</p><p><strong><em>TCP的安全性</em></strong></p><blockquote><p>无论TCP和UDP都没有提供任何的加密机制，所以发送进程传入套接字的数据与经过网络传到目的地的进程的数据相同。<br>因特网界研究了TCP的加强版<strong>安全套接层SSL(Secure Socket Layer)</strong>。包括加密、数据完整性和端点鉴别。<br><strong>注意：</strong> SSL不是TCP和UDP在相同层次上的另一种传输协议，它是一种TCP的加强，这种强化是在应用层上实现的。</p></blockquote><h5 id="3-2-UDP服务"><a href="#3-2-UDP服务" class="headerlink" title="3.2 UDP服务"></a>3.2 UDP服务</h5><p>UDP是一种不提供不必要服务的服务的轻量级传输协议，UDP是无连接的所以没有握手过程。UDP是不可靠的当一个进程发送报文，UDP协议不能保证能完整的到达，并且接收时的顺序很有可能是乱的。<br>UDP也没有拥塞机制。</p><h4 id="4-应用层协议"><a href="#4-应用层协议" class="headerlink" title="4.应用层协议"></a>4.应用层协议</h4><p><strong>应用层协议，定义了运行在不同端系统上的应用程序进程如何传递报文。</strong></p><blockquote><p><strong>应用层协议规定了：</strong><br>交换的报文类型，如请求报文响应报文。<br>各种报文类型的语法，如各个字段定义和描述。<br>字段中的语义，这些字段中的信息含义。<br>确定一个进程何时发送报文，对报文响应的规则。 </p></blockquote><h5 id="4-1-HTTP"><a href="#4-1-HTTP" class="headerlink" title="4.1 HTTP"></a>4.1 HTTP</h5><p>web的应用层协议是<strong>超文本传输协议HTTP</strong>，它是web的核心。  </p><blockquote><p>在【RFC194】和【RFC2016】中进行定义，HTTP由两个程序实现，一个客户程序一个服务程序。通过交换HTTP报文进行会话，HTTP规定了这些报文的结构和交换方式。</p></blockquote><p>HTTP定义了web客户向web服务器请求web页面的方式，也定义了web服务器发送web页面的方式。</p><p>HTTP使用TCP最为传输支撑协议，通过建立TCP连接，浏览器和服务器就可以通过套接字接口访问TCP。<br>客户向它的套接字发送HTTP报文，并从它接收响应报文。通过套接字出去的报文就会进入TCP的控制，因为TCP能够保证数据的完整性是可靠数据传输，所以能够完整的到达服务器或客户端。  </p><p><em>因为HTTP服务器并不会保存关于客户的任何信息，所以称HTTP是<strong>无状态协议</strong></em></p><h5 id="4-2-非持续连接和持续连接"><a href="#4-2-非持续连接和持续连接" class="headerlink" title="4.2 非持续连接和持续连接"></a>4.2 非持续连接和持续连接</h5><p>应用程序的开发者需要做一个决定，就是每个请求/响应是经过单独的TCP连接发送，还是每个请求/响应都是同一个TCP连接。<br>前者被称为<strong>非持续连接</strong>  ，后者被称为<strong>持续连接</strong>。</p><h5 id="4-3-HTTP报文格式"><a href="#4-3-HTTP报文格式" class="headerlink" title="4.3 HTTP报文格式"></a>4.3 HTTP报文格式</h5><p>HTTP报文有两种： <strong>请求报文和响应报文</strong>。<br>请求报文：</p><pre class=" language-HTTP"><code class="language-HTTP">GET /xxx/index.html HTTP/1.1Host: wwww.xxx.comConnection: closeUser-agent: Mozilla/5.0Accept-language: fr（data） </code></pre><p>一个请求报文至少有一行，请求报文的第一行被称为<strong>请求行request line</strong>，其余的叫<strong>首部行 header-line</strong>。  </p><ul><li>请求行<blockquote><p>三个字段： 方法字段、URL字段和HTTP版本</p></blockquote></li></ul><p>当方法为POST时，在报文首部行后面会有一个<strong>实体体entity body</strong>。使用GEt方法时为空。</p><p>响应报文:</p><pre class=" language-HTTP"><code class="language-HTTP">HTTP/1.1 200 okConnection: closeDate: Tue, 18 Aug 2020 15:44:04 GMT  （这个时间是指服务器产生并发送该报文的时间）Server: Apache/2.2.3 (Centos)Last-modified: Tue, 18 Aug 2020 15:44:04 GMT  （对象创建或最后修改的日期）Content-Length: 6821 （被发送对象的字节数）Content-Type； text/html（data）</code></pre><p>响应报文由这几个部分： <strong>初识状态行status line</strong>，<strong>6个首部行header line</strong>然后是<strong>实体体 entity body</strong></p><blockquote><p>常见响应报文的状态码：<br>200 ok 请求成功<br>301 Moved Permanently 请求对象被永久转移，新的URL定义在响应报文的“Location：xxx” 的首部行中，客户软件将自动获取新的URL。<br>304 Not Modified表示没有被修改。<br>+<br>400 Bad Request 通用的错误代码，表示该请求不能被服务器理解。<br>404 Not Found 请求文档找不到。<br>505 HTTP Version Not Support 服务区不支持请求报文使用的HTTP协议版本。</p></blockquote><h5 id="4-4-cookie"><a href="#4-4-cookie" class="headerlink" title="4.4 cookie"></a>4.4 cookie</h5><p>HTTP服务器是无状态的，不会记录用户的信息。如要想要识别用户，HTTP使用cookie。【RFC 6265】中定义，允许站点通过cookie对用户进行跟踪。</p><p><strong><em>cookie技术的四个组件：</em></strong></p><blockquote><p>1.HTTP响应报文中一个cookie首部行<br>2.HTTP请求报文中的一个cookie首部行<br>3.在用户端系统中保留一个cookie文件，并被用户浏览器管理。<br>4.web站点的后端数据库。</p></blockquote><p>当浏览器接收到了HTTP中含有 “Set-cookie: xxx” 时浏览器会在管理的特定cookie文件中添加一行，这一行包含服务器主机名和“set-cookie”中的数据。以后每请求一次这台服务器都会在HTTP请求报文中包括一行首部行： “Cookie: xxx”。</p><h5 id="4-5-web缓存和条件GET"><a href="#4-5-web缓存和条件GET" class="headerlink" title="4.5 web缓存和条件GET"></a>4.5 web缓存和条件GET</h5><p><strong>Web缓存器Web cache</strong>也叫<strong>代理服务器Proxy server</strong>。<br> 浏览器创建一个TCP连接连接到缓存器，向缓存器发送一个HTTP请求。缓存器看看有没有这个对象如果有直接返回，如果没有缓存器就会和原始服务器建立TCP连接获取这个没有的对象，收到这个对象后缓存器会保存起来并向浏览器发送这个副本。<br> 缓存器能够减少用户的响应时间，但是为了保证存放在缓存上的对象副本是最新的HTTP协议有一种机制，叫做条件GET。  </p><blockquote><p>如果请求方法是GET并且请求报文中含有一个 “If-Modified-Since: xxx时间”的首部行那么这个HTTP请求就是一个条件GET。</p></blockquote><p>浏览器发送这个对象的HTTP报文：</p><pre class=" language-HTTP"><code class="language-HTTP">xxxxxxxxxxLast-Modified: Wed, 9 Sep 2020 13:29:47xxxxx</code></pre><p>缓存器存储了这个对象时也存储了Last-Modified这个时间信息。当过了一段时间，再次通过缓存器请求这个对象，该缓存器会给服务器发送一个条件GET:</p><pre class=" language-HTTP"><code class="language-HTTP">xxxxxxxxxxIf-Modified-Since: Wed, 9 Sep 2020 13:29:47xxxxx</code></pre><p>如果这个对象没有被修改，服务器收到后，会返回一个响应报文，这个报文不含响应体，并且这个时候的响应码为 <strong>304 Not Modified</strong>。</p><h4 id="5-DNS-因特网的目录服务"><a href="#5-DNS-因特网的目录服务" class="headerlink" title="5.DNS 因特网的目录服务"></a>5.DNS 因特网的目录服务</h4><p>为了方便主机名到IP地址转化的目录服务，这就是<strong>域名系统</strong>。</p><h5 id="5-1-DNS提供的服务"><a href="#5-1-DNS提供的服务" class="headerlink" title="5.1 DNS提供的服务"></a>5.1 DNS提供的服务</h5><p>DNS是由一个分层的<strong>DNS服务器（DNS server）</strong>实现的分布式数据库，一个能够使主机查询分布式数据库的应用层协议。DNS服务器通常是运行在BIND软件的UNIX机器。<br>DNS协议为应用层协议，运行在UDP协议上，端口是53。</p><h6 id="主机别名和规范主机名"><a href="#主机别名和规范主机名" class="headerlink" title="主机别名和规范主机名"></a>主机别名和规范主机名</h6><p>拥有复制主机名的主机能够拥有一个多多个别名。  </p><blockquote><p>如 <code>blog.xiaohai.cn</code> 的主机还有为<code>4xf6hs.coding-pages.com</code> 和 <code>xiaohaimao.cn</code>的别名。这种情况下<code>blog.xiaohai.cn</code>被称为规范主机名。</p></blockquote><h5 id="5-2-DNS的工作概述"><a href="#5-2-DNS的工作概述" class="headerlink" title="5.2 DNS的工作概述"></a>5.2 DNS的工作概述</h5><p>用户使用如浏览器需要将主机名转化为IP的地址，这些应用程序需要调用DNS的客户端，指明需要转换的主机名。用户上的DNS收到数据后，向网络中发送和一个DNS查询报文。<br><strong><em>所有的DNS请求和接收都使用UDP数据报通过53端口</em></strong><br><em>如果采用单一的DNS服务器来处理英特网上所有的请求，会有单点故障、通信容量、远距离传输和数据库维护成本的缺点。因此DNS采用分布式的设计方案。DNS就是一个在英特网上实现分布式数据库的案例</em></p><h6 id="分布式、层次数据库"><a href="#分布式、层次数据库" class="headerlink" title="分布式、层次数据库"></a>分布式、层次数据库</h6><p>DNS使用了大量的DNS服务器，它们以层次的方式组织，并且分布在世界的各个范围。没有一台DNS服务器上拥有英特网上的所有主机映射。这些映射分布在这些服务器上。  </p><blockquote><p>有三种类型的DNS服务器：<br>  1 根DNS服务器<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>400多个，遍布全球。</em><br>  2 顶级域名DNS服务器 TLD（Top-Level Domain）<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>每个顶级域<code>.com</code>、<code>.org</code>、<code>.edu</code>…和国家顶级域<code>.cn</code>、<code>.uk</code>、<code>.fr</code>…都有TLD服务器或集群。</em><br>  3 权威DNS服务器<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在英特网上必须有公共可访问主机的每个组织机构公共可访问的权威DNS记录，这些记录将主机名映射为IP地址。一个机构有自己的权威DNS服务器或者花钱存储在其他服务提供机构的权威DNS服务器上。</p></blockquote><p>如果要查询 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>首先，客户先与这些根DNS之一联系，返回<code>.com</code>的TLD服务器的IP地址；<br>然后，客户端再与这些TLD服务器之一联系，返回<code>baidu.com</code>的权威服务器地址；<br>最后，客户端与这些权威服务器之一联系，为主机<code>www.baidu.com</code>返回IP地址。<br><img src="https://s1.ax1x.com/2020/08/06/ac8KKO.png" alt="DNS服务器.png"></p><h6 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h6><p>为了解决查询一个主机名，要去查根服务器又要查TLD服务器最后又要查权威服务器的传输时延。DNS广泛的使用了缓存技术。<br>如果某个DNS服务器接收到了一个DNS回答，这个回答中包含了主机到IP的映射，那么这个DNS服务器就会把这个记录缓存下来。每当有DNS请求到这台服务器时，如果能在缓存中找到就会返回IP地址，即使不是它的权威服务器也能够提供所需的IP地址。<br>通常DNS服务器在一段时间后会丢弃缓存信息。<br>如果本地DNS有缓存有TLD服务器的IP地址，就可以绕过查询链中的根服务器，实际除只有少数的DNS查询外一边都绕过根服务器了。</p><h5 id="5-3-DNS记录"><a href="#5-3-DNS记录" class="headerlink" title="5.3 DNS记录"></a>5.3 DNS记录</h5><p>共同实现DNS分布式数据库的所有DNS服务器存储了<strong>资源记录RR(Resource Record)</strong>。<br>资源记录包含 <code>(Name, Value, Type, TTL)</code> 这么一个元组。TTL为缓存的存活时间。<br><a href="https://imgtu.com/i/c1ys3V" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/04/06/c1ys3V.png" alt="DNS记录.png"></a></p><ul><li>Type为A，则Name为主机名，Value为主机对应的IP地址。</li><li>Type为NS，则Name为域，而Value是个知道如何获取得到该域中主机IP的权威DNS服务器主机名。</li><li>Type为CNAME，Value就是别名为Name的主机的规范主机名。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络自顶向下读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络和因特网</title>
      <link href="/2021/04/06/ji-suan-ji-wang-luo-he-yin-te-wang/"/>
      <url>/2021/04/06/ji-suan-ji-wang-luo-he-yin-te-wang/</url>
      
        <content type="html"><![CDATA[<h4 id="1-1接入方式"><a href="#1-1接入方式" class="headerlink" title="1.1接入方式"></a>1.1接入方式</h4><h6 id="家庭接入"><a href="#家庭接入" class="headerlink" title="家庭接入"></a>家庭接入</h6><ol><li>DSL(数字用户线) 通过电话线接入，用户本地的电话公司就是ISP(Internet service provider)</li><li>FTTH(Fiber To The Home光纤到户)光纤入户有很多种架构，其中主要有两种：一种是点对点形式拓扑，从中心局到每个用户都用一根光纤；另外一种是使用点对多点形式拓扑方式的无源光网络（PON），采用点到多点的方案可大大降低光收发器的数量和光纤用量，并降低中心局所需的机架空间，具有成本优势，已经成为主流。、</li><li>电缆英特网接入。 利用有线电基础设施，住宅从提供有线电视的公司获取英特网的接入。、</li><li>在无法提供DSL、FTTH和电缆的地区，通过卫星链路连接</li></ol><h6 id="公司接入"><a href="#公司接入" class="headerlink" title="公司接入"></a>公司接入</h6><p>一般为</p><pre><code>            ISP             |         机构路由器             |           交换机  |       |        |      |      |电脑    电脑    。。。  电脑   服务器</code></pre><h6 id="广域无线接入"><a href="#广域无线接入" class="headerlink" title="广域无线接入"></a>广域无线接入</h6><p>3G、4G。通过蜂窝网提供商运营的基站来接收和发送分组。</p><h4 id="1-2-物理媒体"><a href="#1-2-物理媒体" class="headerlink" title="1.2 物理媒体"></a>1.2 物理媒体</h4><p>如： 双绞线（一直用于电话）、光缆、同轴电缆、陆地无线电频谱、卫星无线电频谱…<br>物理媒体分为<strong>两类：引导型和非引导型</strong><br>引导型，沿着固体前行。如 光缆<br>非引导型，电波在空气或外层空间传播。</p><h4 id="1-3-网络核心"><a href="#1-3-网络核心" class="headerlink" title="1.3 网络核心"></a>1.3 网络核心</h4><p><strong>分组交换和电路交换</strong>两种交换传输的特点决定了我们平时的电话通信使用的是电路交换，像互联网中的微信等这种不要求实时的通信用分组交换。</p><h5 id="1-3-1-分组交换"><a href="#1-3-1-分组交换" class="headerlink" title="1.3.1 分组交换"></a>1.3.1 分组交换</h5><ul><li>在网络中，端系统之间彼此交换<strong>报文</strong></li></ul><blockquote><p><strong>报文(Message)</strong>： 可以执行一种控制功能。或者包含数据，如：图像、音频。<br>从源端系统到目的端系统发送一个报文，源将长报文划分为较小的数据块 称之为<strong>分组(Packet)</strong>。</p></blockquote><blockquote><p>在源和目的地之间每个分组通过通信链路和分组交换机。交换机主要分两类： <strong>1.路由器 2.链路层交换机</strong>。<br>分组交换，多数分组交换机在链路的输入端使用<strong>存储转发传输</strong>机制。就是指交换机在向链路传输该分组的第一个比特前，必须先接收到整个分组。<br>路由器在转发前，需要<strong>接受、存储和处理</strong>整个分组。  </p></blockquote><ul><li>分组交换有<strong>排队时延</strong> 和 <strong>分组丢失</strong>  <blockquote><p>每个交换机有多个链路相连，每个交换机有<strong>输出缓存(output buffer)也叫输出队列(output queue)</strong>。  如果到达的分组需要传输到某个链路去，但是发现该链路正在传输其他的分组，这个时候到达的这个分组需要在输入缓存中等待。所以分组还要承担<strong>排队的时延</strong>。</p></blockquote></li></ul><blockquote><p>缓存空间是有大小的。如果缓存空间满了，在这种情况下会出现<strong>丢包(packet loss)</strong>的情况。到达的分组或者排队的分组之一会被丢弃。</p></blockquote><ul><li>转发表和路由选择协议<blockquote><p>当源想目的地发送一个分组时，每个分组的首部包含了目的地的IP地址，当这个分组到达某个路由器时，路由器检查这个分组的目的地IP地址一部分，通过这部分在<strong>转发表(forwarding table)</strong><br>中搜索以发现最合适的链路。将这个分组转发给相邻的路由器。</p></blockquote></li></ul><blockquote><p> <strong>路由选择协议(routing protocol)</strong>，用于自动的设置这些转发表，一个路由选择协议可以决定每台路由器到每个目的地的最短路径，通过这些路径来配置转发表。</p></blockquote><h5 id="1-3-2-电路交换"><a href="#1-3-2-电路交换" class="headerlink" title="1.3.2 电路交换"></a>1.3.2 电路交换</h5><p>通过网络链路和交换机移动数据有两种基本方式： <strong>1、分组交换</strong> <strong>2、电路交换</strong></p><blockquote><p>电路连接的三个阶段：<br>1、建立连接。<br>2、数据传输。<br>3、释放连接。<br>优点：<br>1、传输速度快、高效。<br>2、实时。<br>缺点：<br>1、资源利用率低。<br>2、新建连接需要占据一定的时间，甚至比通话的时间还长。  </p></blockquote><h5 id="1-3-3-网络的网络"><a href="#1-3-3-网络的网络" class="headerlink" title="1.3.3 网络的网络"></a>1.3.3 网络的网络</h5><p>如今的因特网是一个网络的网络，就是由10多个顶级ISP和数十万个低层ISP组成。ISP覆盖的区域多种多样，有些跨越多个大洲大洋，有的限于一些狭窄的区域。低层ISP与高层ISP相连，高层的ISP彼此相连。用户和内容提供商是较低层ISP的用户，较低层ISP是高层的ISP用户。</p><h4 id="1-4-分组交换中的时延、丢包和吞吐量"><a href="#1-4-分组交换中的时延、丢包和吞吐量" class="headerlink" title="1.4 分组交换中的时延、丢包和吞吐量"></a>1.4 分组交换中的时延、丢包和吞吐量</h4><h5 id="1-4-1-时延"><a href="#1-4-1-时延" class="headerlink" title="1.4.1 时延"></a>1.4.1 时延</h5><p>分组从源出发到目的地，经过的多个节点（路由器、主机）。每经过一个节点都经受了几种不同的时延。<strong>节点的处理时延、排队时延、传输时延、传播时延</strong>这些总和是<strong>节点总时延</strong>。</p><ul><li><p>处理时延</p><blockquote><p> 检查分组首部和决定将分组导向何处的处理时间。</p></blockquote></li><li><p>排队时延</p><blockquote><p> 如果一个分组进入排队队列，如果队列是空的，当前也没有其他分组正在传输那么排队延时就是0。</p></blockquote></li><li><p>传输时延</p><blockquote><p> 分组以先到先传的方式传输。（仅当其余分组传输完成之后，才传输刚到的分组）用<strong>L</strong>表示分组的长度，<strong>R bbps</strong>表示这段链路的传输数率，传输时延就是 <strong>L / R</strong></p></blockquote></li><li><p>传播时延</p><blockquote><p> 一个比特被推向链路，从该链路的起点到下一个路由器传播所需要的时间就是传播时延。一般在广于网中传播时延为毫秒级。</p></blockquote></li></ul><p><strong>传输时延和传播时延的比较</strong>  </p><blockquote><p>传输时延是路由器<strong>推出分组所需要的时间</strong>，它是<strong>分组长度和链路传输速率的函数</strong>，与两台路由器之间的距离无关。<br>传播时延是一个比特从一台路由器传播到另外一台路由器所需要的时间。是两台路由器之间距离的函数，与分组长度和链路传输数率无关。</p></blockquote><h5 id="1-4-2-网络中的吞吐量"><a href="#1-4-2-网络中的吞吐量" class="headerlink" title="1.4.2 网络中的吞吐量"></a>1.4.2 网络中的吞吐量</h5><p>如服务器到路由器之间的链路速率为<strong>Rs</strong>，路由器到客户之间的链路速率为<strong>Rc</strong>。如果<strong>Rs &gt; Rc</strong>，那么吞吐量就是<strong>Rc</strong>;如果<strong>Rs &lt; Rc</strong>，那么吞吐量就是<strong>Rs</strong>。吞吐量表示为<strong>min{Rs,Rc}</strong>，称为<strong>瓶颈链路(bottleneck link)</strong>的传输速率。<br>如今对吞吐量的限制因素一般为接入网，因为一般因特网的核心配置有超高速的速率链路。</p><blockquote><p>如10台客户机每台有一条为<strong>Rc</strong>速率的数据链路，它们与速率为<strong>R</strong>的核心链路连接，与之连接的有对应客户的10台速率为<strong>Rs</strong>服务器。<br>如果说核心<strong>R</strong>比<strong>Rs和Rc</strong>大得多，那么这时候吞吐量仍为<strong>min{Rs,Rc}</strong>；但如果假定<strong>Rs</strong>为2Mbps、<strong>R</strong>为5Mbps、<strong>Rc</strong>为1Mbps，那么这时候吞吐量为<strong>500kps</strong>。<br>10 x 1Mbps = 10Mbps,超出了核心的5Mbps。</p></blockquote><h4 id="1-5-协议层次和服务模型"><a href="#1-5-协议层次和服务模型" class="headerlink" title="1.5 协议层次和服务模型"></a>1.5 协议层次和服务模型</h4><h5 id="1-5-1-协议分层"><a href="#1-5-1-协议分层" class="headerlink" title="1.5.1 协议分层"></a>1.5.1 协议分层</h5><p>因特网的协议由五层组成： <strong>应用层、传输层、网络层、数据链路层、物理层</strong>  </p><ul><li><p>应用层</p><blockquote><p>应用层是网络应用程序及它们的应用层协议存留的地方。应用层协议分布在多个端系统之上，而一个端系统中应用程序使用协议与另外一个端系统中的应用程序进行交互，把这种应用层的信息分组称为<strong>报文</strong>。</p></blockquote></li><li><p>传输层</p><blockquote><p>因特网的传输层在应用程序之间传送<strong>应用层报文</strong>。两种传输协议 TCP和UDP。 TCP向应用程序提供了面向连接的服务。确保传递和流量控制(发送接收方的速率匹配)；也将长报文分为短报文，提供拥塞控制机制，当网络拥塞时抑制其传输速率。</p></blockquote></li><li><p>网络层</p><blockquote><p>因特网的网络层负责将<strong>数据报datagram</strong>的网络层分组，从一台主机转移到另外一条主机。源主机的传输层（UDP、TCP）向网络层递交传输层的报文段和目的地址。<br>网络层包括著名的IP（网际协议）协议,这个协议定义了在数据报中的各个字段以及端系统和路由如何作用于这些字段。所有具有网络层的设备必须运行IP。<br>也称为IP层。</p></blockquote></li><li><p>数据链路层</p><blockquote><p>因特网的网络层通过源和目的之间的路由器路由数据报。为了将一个分组移动到下个节点，网络层必须依赖链路层的服务。<br>把链路层的分组称为<strong>帧(frame)</strong></p></blockquote></li><li><p>物理层</p><blockquote><p>链路层的任务是将帧从一个网络元素移动到下一个网络元素。物理层的任务就是将这些帧一个个比特从一个节点移动到下一个节点。</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络自顶向下读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块化</title>
      <link href="/2020/09/07/es6-mo-kuai-hua/"/>
      <url>/2020/09/07/es6-mo-kuai-hua/</url>
      
        <content type="html"><![CDATA[<h4 id="浏览器环境中的导入导出"><a href="#浏览器环境中的导入导出" class="headerlink" title="浏览器环境中的导入导出"></a>浏览器环境中的导入导出</h4><blockquote><p><font color="red">需要开启liveserver</font>，不然会有跨域问题。</p></blockquote><pre class=" language-html"><code class="language-html">需要将type类型指定为module<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./xxx/xxx<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h6 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h6><blockquote> <font color="red">一个模块，默认导出只能有一个</font></blockquote><pre class=" language-js"><code class="language-js">导出格式为 <span class="token punctuation">[</span><span class="token keyword">export</span> 声明、变量、函数或类声明。<span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span><span class="token keyword">let</span> xx <span class="token operator">=</span> <span class="token string">"xx"</span><span class="token punctuation">;</span><span class="token keyword">export</span> xx<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>默认导出<span class="token punctuation">,</span>只能导出一次。<span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或export { Lala as default };</span><span class="token comment" spellcheck="true">// 在默认导出后面可以加值。 export 45;</span></code></pre><h6 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h6><pre class=" language-js"><code class="language-js">defa为默认导出的值。可以通过<span class="token keyword">as</span>指a将定名字为b。<span class="token keyword">import</span> defa<span class="token punctuation">,</span><span class="token punctuation">{</span>xxx<span class="token punctuation">,</span>a <span class="token keyword">as</span> b<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./xxx/xxx"</span><span class="token punctuation">;</span> </code></pre><p>如：</p><pre class=" language-js"><code class="language-js">导出文件<span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> xx <span class="token operator">=</span> <span class="token string">"love you"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>   <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> xx<span class="token punctuation">;</span>导入文件<span class="token keyword">import</span> defa<span class="token punctuation">[</span>默认导出的值<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> xx<span class="token punctuation">,</span> xxx <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./xx/xxx.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>defa<span class="token punctuation">,</span> xx<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意: 在函数或其他语句中不能使用<code>export</code> <code>import</code>。<br>如：if(xxx){ export xx; }  </p></blockquote><font color="#5b4aff">如果导入的文件有很多可以使用 <code>import * as xxx from &quot;./xxx&quot;;</code>全部导出。但是全部导出必须通过as重命名，因为不重命名没有名称。</font><br><font color="#5b792c">如果只是想导入,只是运行一个模块可以直接使用<code>import &quot;./xxx&quot;</code>。</font>  ]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 权威指南笔记 类型、运算符</title>
      <link href="/2020/06/23/js-quan-wei-zhi-nan-bi-ji/"/>
      <url>/2020/06/23/js-quan-wei-zhi-nan-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="前四章"><a href="#前四章" class="headerlink" title="前四章"></a>前四章</h3><h4 id="1-js的六大数据类型"><a href="#1-js的六大数据类型" class="headerlink" title="1. js的六大数据类型"></a>1. js的六大数据类型</h4><p>基本数据类型：  </p><ul><li>Number</li><li>String</li><li>Boolean  </li><li>Undefinde</li><li>Null</li><li>Object<br>JavaScript不区分整型和浮点型</li></ul><h4 id="2-js的垃圾回收机制"><a href="#2-js的垃圾回收机制" class="headerlink" title="2. js的垃圾回收机制"></a>2. js的垃圾回收机制</h4><p>自动的对内存进行垃圾回收，当创建的对象没有被引用的时候，解释器就会认为这个对象没有用了，然后就回收它。</p><h4 id="3-js中instanceof运算符"><a href="#3-js中instanceof运算符" class="headerlink" title="3. js中instanceof运算符"></a>3. js中instanceof运算符</h4><p>instanceof运算符的左边为一个对象右边为对象的类。如果左侧的对象是右侧类的实例的话返回true，否则返回false。<br><strong>并且,instanceof会对右侧类的父类进行检查。</strong></p><blockquote><p>如果左侧不是一个对象的话返回false；<br>  如果右侧不是一个函数的话会抛出一个类型错误。</p></blockquote><h4 id="4-逻辑与-amp-amp"><a href="#4-逻辑与-amp-amp" class="headerlink" title="4. 逻辑与 &amp;&amp;"></a>4. 逻辑与 &amp;&amp;</h4><p>先计算 “&amp;&amp;” 左侧的值，如果是假值整个表达式就为假，就直接返回左操作数的值，不会对右操作数进行计算。<br>如果左操作数的值为一个真值，那么整个表达式的值依赖右操作数的结果。  </p><blockquote><p>如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">45</span>               <span class="token comment" spellcheck="true">// 结果为0</span><span class="token number">45</span> <span class="token operator">&amp;&amp;</span> <span class="token number">100</span>             <span class="token comment" spellcheck="true">// 结果为45</span><span class="token number">45</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span>           <span class="token comment" spellcheck="true">// 结果为false</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span>     <span class="token comment" spellcheck="true">// 结果是 6</span><span class="token number">45</span> <span class="token operator">&amp;&amp;</span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> <span class="token number">100</span>       <span class="token comment" spellcheck="true">// 结果为100</span></code></pre></blockquote><h4 id="5-逻辑或"><a href="#5-逻辑或" class="headerlink" title="5. 逻辑或 ||"></a>5. 逻辑或 ||</h4><p>和 “&amp;&amp;” 类似，“||”先计算左操作数的值为真就直接返回，否则看右边的值如果右边的也是一个假值，最后会返回右边的结果。</p><blockquote><p>如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">45</span> <span class="token operator">||</span> <span class="token number">0</span>               <span class="token comment" spellcheck="true">// 结果45</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token boolean">false</span>            <span class="token comment" spellcheck="true">// 结果false</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">45</span>           <span class="token comment" spellcheck="true">// 结果45</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token number">45</span> <span class="token operator">||</span> <span class="token number">100</span>    <span class="token comment" spellcheck="true">// 结果45</span></code></pre></blockquote><p>在函数中可以使用它来实现默认值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    p <span class="token operator">=</span> p <span class="token operator">||</span> <span class="token number">45</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果没有传入的参数p，默认在后面赋默认值45。</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h4 id="6-运算符typeof"><a href="#6-运算符typeof" class="headerlink" title="6. 运算符typeof"></a>6. 运算符typeof</h4><p>返回结果 ：  </p><ol><li>“undefined”</li><li>“object”</li><li>“boolean”</li><li>“number”</li><li>“string”</li><li>“function”</li><li>“symbol” es6新增</li></ol><h4 id="7-逗号操作符"><a href="#7-逗号操作符" class="headerlink" title="7. 逗号操作符"></a>7. 逗号操作符</h4><p>从左至右计算操作数，返回最后一个。</p><blockquote><p>如：</p><pre class=" language-javascript"><code class="language-javascript">i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>       <span class="token comment" spellcheck="true">// 结果为2</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript权威指南笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE组件子组件传值给父组件</title>
      <link href="/2019/09/04/vue-zu-jian-zi-zu-jian-chuan-zhi-gei-fu-zu-jian/"/>
      <url>/2019/09/04/vue-zu-jian-zi-zu-jian-chuan-zhi-gei-fu-zu-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="子组件向父组件通信、传递数据"><a href="#子组件向父组件通信、传递数据" class="headerlink" title="子组件向父组件通信、传递数据"></a>子组件向父组件通信、传递数据</h3><font><center>通过$children</center></font><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过ref拿到子组件的实例，进一步拿到子组件里面的值</span>            <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            yes<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span>                        data<span class="token punctuation">:</span> <span class="token string">"我是子组件的数据"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                template<span class="token punctuation">:</span> <span class="token string">"&lt;p >我是组件&lt;/p>"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><font><center>通过引用的方式</center></font><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 如果ref重名了，后面的会覆盖前面的。 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 如果<span class="token keyword">for</span>循环 <span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">"lala"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"...."</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>。$refs会用一个数组存放这个ref <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">"lala"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>yes ref<span class="token operator">=</span><span class="token string">'yes'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过ref拿到子组件的实例，进一步拿到子组件里面的值</span>            <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>yes<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            yes<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span>                        data<span class="token punctuation">:</span> <span class="token string">"我是子组件的数据"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                template<span class="token punctuation">:</span> <span class="token string">"&lt;p >我是组件&lt;/p>"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><font><center>通过子组件内部事件</center></font></p><pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定函数 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>yes <span class="token punctuation">:</span>func<span class="token operator">=</span><span class="token string">"func"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        yes<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过属性拿到父组件的方法</span>            props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">:</span> <span class="token string">"我是子组件的数据"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token string">"&lt;button @click='innerFunc'>点击&lt;/button>"</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 通过子组件的方法触发父组件的方法</span>                <span class="token function">innerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// props里面的属性可以直接拿来用。挂载到这个组件上面的</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><font><center>通过子组件事件 $listeners</center></font></p><pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 在子组件身上绑定事件 因为非原生dom点击yes元素func不会触发<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>yes @click<span class="token operator">=</span><span class="token string">"func"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">func</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        yes<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">:</span> <span class="token string">"我是子组件的数据"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token string">"&lt;button @click='innerFunc'>点击&lt;/button>"</span><span class="token punctuation">,</span>            methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">innerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果在子组件上面通过v-on绑定事件，会记录到实例上的 $listeners 属性上。</span>                    <span class="token comment" spellcheck="true">//相当于执行了父组价里面的click方法</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>$listeners<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//也可以使用 $emit触发</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE组件</title>
      <link href="/2019/09/03/vue-zu-jian/"/>
      <url>/2019/09/03/vue-zu-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue中组件的使用"><a href="#Vue中组件的使用" class="headerlink" title="Vue中组件的使用"></a>Vue中组件的使用</h3><p>全局组件的定义</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>yes<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'yes-com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            data<span class="token punctuation">:</span> <span class="token string">"我是data"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{data}}&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>局部组件的定义</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用的时候还是用连字符的方式 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 优先使用局部组件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>yes<span class="token operator">-</span>com a<span class="token operator">=</span><span class="token string">"自定义的prop"</span> b<span class="token operator">=</span><span class="token string">"自定义"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>yes<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//全局</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-conponet'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一个组件的 data 选项必须是一个函数。因此每个实例可以维护一份被返回对象的独立的拷贝：</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        data<span class="token punctuation">:</span><span class="token string">"我是数据"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span><span class="token string">'&lt;div>{{data}}&lt;/div>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//局部组件定义</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span><span class="token punctuation">{</span>        yesCom<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果需要用到prop,要在组件的props里面注册</span>            props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//如果需要对prop做限制处理,可以把props写成一个对象的形式</span>            <span class="token comment" spellcheck="true">// props:{</span>            <span class="token comment" spellcheck="true">//   a:{</span>            <span class="token comment" spellcheck="true">//      type:Number,</span>            <span class="token comment" spellcheck="true">//      required:true</span>            <span class="token comment" spellcheck="true">//      default:"我是默认值"</span>            <span class="token comment" spellcheck="true">//   }</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">:</span><span class="token string">"我是局部组件的数据"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。  </span>            <span class="token comment" spellcheck="true">// 在上述模板中，你会发现我们能够在组件实例中访问这个值，就像访问data 中的值一样。</span>            template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{data}}{{a}}&lt;/div>'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><a href="https://cn.vuejs.org/v2/guide/components-props.html" target="_blank" rel="noopener">prop相关<a></a></a></p><p><font size="5">组件之间的数据传递</font></p><p><font><center>$attrs</center><font></font></font></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>first<span class="token operator">-</span>com <span class="token punctuation">:</span>title<span class="token operator">=</span><span class="token string">"title"</span> <span class="token punctuation">:</span>content<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>first<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">"我是标题"</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token string">"我是内容"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        firstCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>            props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//在模板字符串中使用  this.$attrs.content 获取没有注册的prop属性。</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>                            {{title}}                               &lt;second-com :content="this.$attrs.content"> &lt;/second-com>                        &lt;/div>`</span></span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 不显示没有注册的属性，content就不会显示到first-com元素上面</span>            inheritAttrs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                secondCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    template<span class="token punctuation">:</span> <span class="token string">"&lt;div>{{content}}&lt;/div>"</span><span class="token punctuation">,</span>                    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><font><center>$parent方式</center><font></font></font></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">"我是标题"</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token string">"我是内容"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        firstCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>            props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>                            {{title}}                            &lt;second-com> &lt;/second-com>                        &lt;/div>`</span></span><span class="token punctuation">,</span>            inheritAttrs<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                secondCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 通过实例上面的$parent查找</span>                    template<span class="token punctuation">:</span> <span class="token string">"&lt;div>{{this.$parent.$parent.content}}&lt;/div>"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><font><center>Provide inject方式</center><font></font></font></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>first<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>first<span class="token operator">-</span>com<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//提供</span>    provide<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">"我是标题"</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token string">"我是内容"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>        firstCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//注入</span>            inject<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"title"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>                        {{title}}                        &lt;second-com>&lt;/second-com>                        &lt;/div>`</span></span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                secondCom<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//注入</span>                    inject<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    template<span class="token punctuation">:</span> <span class="token string">"&lt;div>{{content}}&lt;/div>"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE的生命周期函数</title>
      <link href="/2019/09/02/vue-de-sheng-ming-zhou-qi-han-shu/"/>
      <url>/2019/09/02/vue-de-sheng-ming-zhou-qi-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="VUE实例的生命周期图"><a href="#VUE实例的生命周期图" class="headerlink" title="VUE实例的生命周期图"></a>VUE实例的生命周期图</h3><p><img src="&quot;lifecycle.png&quot;" alt="生命周期图"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>yes<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建前 没有这个值</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>yes<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我在创建前面被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>yes<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我在创建前面被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//添加到DOM上时</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//更新前执行</span>    <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>yes <span class="token operator">=</span> <span class="token string">"455"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这里是更新前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果在这里面赋值会死循环一直updated（）</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我快要被销毁了，我不想死啊(;´༎ຶД༎ຶ`)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我被销毁了(ノへ￣、),再见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        yes<span class="token punctuation">:</span> <span class="token string">"啦啦"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="&quot;生命周期函数.JPG&quot;" alt="生命周期图"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE自定义指令</title>
      <link href="/2019/09/01/vue-zi-ding-yi-zhi-ling/"/>
      <url>/2019/09/01/vue-zi-ding-yi-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="定义全局指令"><a href="#定义全局指令" class="headerlink" title="定义全局指令"></a>定义全局指令</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 全局指令。两个被Vue管理的元素都可以使用slice指令 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>slice<span class="token operator">=</span><span class="token string">"content"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>slice<span class="token operator">=</span><span class="token string">"content"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// 定义全局的指令  第一个参数是指令名字。在使用的时候需要写成 v-指令名字。</span><span class="token comment" spellcheck="true">// 第二个参数是一个对象，里面的是钩子函数。</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'slice'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//指令第一次绑定到元素上面时执行</span>    <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一次绑定执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//绑定数据更新时执行</span>    <span class="token function">update</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//被插入到父节点中时执行，用于保证父节点存在，不能保证插入文档中</span>    <span class="token function">inserted</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我插入父节点中了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//指令所在组件的 VNode 及其子 VNode 全部更新后调用。</span>    <span class="token function">componentUpdated</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//只调用一次，指令与元素解绑时调用。</span>    <span class="token function">unbind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span>bing<span class="token punctuation">,</span>vnode<span class="token punctuation">,</span>onVonde<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">"我是content哦"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app1"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">"那我是content1 ~QWQ~"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果只是关心 bind 和 update这两个钩子函数可以简写为这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>slice<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>slice<span class="token operator">=</span><span class="token string">"content1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//directive这里面的第二个参数是一个函数，是bind 和 update的结合。第一次绑定到元素身上时触发，数据更新时候触发</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'slice'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> bindings<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> bindings<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">"我是content哦"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app1"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content1<span class="token punctuation">:</span> <span class="token string">"那我是content1 ~QWQ~"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="定义局部指令"><a href="#定义局部指令" class="headerlink" title="定义局部指令"></a>定义局部指令</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>yes<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">"我是content"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指令的定义。 也有这些钩子函数，也可以简写 bind update</span>        yes<span class="token punctuation">:</span> <span class="token punctuation">{</span>            inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>                el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="钩子函数中的参数"><a href="#钩子函数中的参数" class="headerlink" title="钩子函数中的参数"></a>钩子函数中的参数</h3><p><center><font size="4">钩子函数中的参数有el、bing、vnode、onVonde。</font></center></p><p><font face="幼圆"><br>    el：指令所绑定的元素，可以用来直接操作 DOM 。<br>    binding：一个对象，包含以下属性：<br>    &emsp;name：指令名，不包括 v- 前缀。<br>    &emsp;value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。<br>    &emsp;oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。<br>    &emsp;expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。<br>    &emsp;arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。<br>    &emsp;modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。<br>    vnode：Vue 编译生成的虚拟节点。移步 VNode API 来了解更多详情。<br>    oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。<br></font><br><img src="./全局指令.JPG" alt="VUE自定义指令"></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE指令2</title>
      <link href="/2019/08/30/vuej-zhi-ling-2/"/>
      <url>/2019/08/30/vuej-zhi-ling-2/</url>
      
        <content type="html"><![CDATA[<h3 id="v-bind-类名-src等数据绑定的时候"><a href="#v-bind-类名-src等数据绑定的时候" class="headerlink" title="v-bind 类名 src等数据绑定的时候"></a>v-bind 类名 src等数据绑定的时候</h3><font size="5">图片的显示</font><br><font color="ff0000">v-bind可以简写为 “:” </font><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img v<span class="token operator">-</span>bind<span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"img"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>img<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        img<span class="token punctuation">:</span><span class="token string">"http://5b0988e595225.cdn.sohucs.com/q_70,c_zoom,w_640/images/20180314/f15d71681dbf4bcc8b33fe261d3820db.gif"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><font size="5">类名的添加</font><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"c"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        c<span class="token punctuation">:</span><span class="token string">"yes"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./class添加.JPG" alt="Class添加"></p><p>如果有多个类名，需要写在[]里面</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"[c1,c2]"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        c1<span class="token punctuation">:</span><span class="token string">"yes"</span><span class="token punctuation">,</span>        c2<span class="token punctuation">:</span><span class="token string">"no"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./多个class.JPG" alt="多个class"></p><p>通过{}进行运算</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> yes是添加的类名，后面的isAdd进行判断是否添加 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{yes:isAdd}"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        c<span class="token punctuation">:</span><span class="token string">"yes"</span><span class="token punctuation">,</span>        isAdd<span class="token punctuation">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./运算.JPG" alt="运算"></p><p><font size="5">style的添加</font><br>如果是添加style里面的一个样式可以这样写：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"{width:'500px',height:'500px',backgroundColor:bgColor}"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        bgColor<span class="token punctuation">:</span><span class="token string">"yellow"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./style添加.JPG" alt="style添加"></p><p>如果有多个style样式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>需要通过 <span class="token string">"[]"</span> 添加<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"[style1,style2]"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        style1<span class="token punctuation">:</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span>500px<span class="token punctuation">,</span>height<span class="token punctuation">:</span>500px<span class="token punctuation">,</span>backgroundColor<span class="token punctuation">:</span>yellow<span class="token punctuation">}</span><span class="token punctuation">,</span>        style2<span class="token punctuation">:</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span>100px<span class="token punctuation">,</span>height<span class="token punctuation">:</span>100px<span class="token punctuation">,</span>backgroundColor<span class="token punctuation">:</span>blue<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./多个style样式.JPG" alt="多个style"></p><h3 id="v-on-VUE中事件的绑定"><a href="#v-on-VUE中事件的绑定" class="headerlink" title="v-on VUE中事件的绑定"></a>v-on VUE中事件的绑定</h3><p><font color="ff0000">v-on:可以简写为 “@” </font></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>on<span class="token punctuation">:</span>click<span class="token operator">=</span><span class="token string">"click"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data里面也可以写是上这个函数。但是这里面的this指向window</span>        <span class="token comment" spellcheck="true">// click(){</span>        <span class="token comment" spellcheck="true">//     console.log("yes,我被点击了")</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//事件函数写在里面</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里面的this指向实例vm</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"yes,我被点击了"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE指令</title>
      <link href="/2019/08/29/vue-zhi-ling/"/>
      <url>/2019/08/29/vue-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="v-pre-如果有元素不想被Vue渲染的话，可以加上这个指令"><a href="#v-pre-如果有元素不想被Vue渲染的话，可以加上这个指令" class="headerlink" title="v-pre 如果有元素不想被Vue渲染的话，可以加上这个指令"></a>v-pre 如果有元素不想被Vue渲染的话，可以加上这个指令</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>pre<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//这里就不会显示yes了，显示{{a}}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token string">"yes"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="v-once-只渲染第一次的值，以后的值更改不会再渲染。"><a href="#v-once-只渲染第一次的值，以后的值更改不会再渲染。" class="headerlink" title="v-once  只渲染第一次的值，以后的值更改不会再渲染。"></a>v-once  只渲染第一次的值，以后的值更改不会再渲染。</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>pre<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token string">"yes"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">"no"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./image/v-once.JPG" alt="v-once">;</p><h3 id="v-html-可能从后台拿回来的值是字符串，v-html可以当成元素插入。相当于innerHtml"><a href="#v-html-可能从后台拿回来的值是字符串，v-html可以当成元素插入。相当于innerHtml" class="headerlink" title="v-html 可能从后台拿回来的值是字符串，v-html可以当成元素插入。相当于innerHtml"></a>v-html 可能从后台拿回来的值是字符串，v-html可以当成元素插入。相当于innerHtml</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>html<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token string">"&lt;p>我是段落yes！！！&lt;/p>"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="v-text-同理-相当于innerText"><a href="#v-text-同理-相当于innerText" class="headerlink" title="v-text 同理 相当于innerText"></a>v-text 同理 相当于innerText</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>       里面的值不会显示，因为等同于innerText     <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token string">"我是段落yes！！！"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="v-if-v-else-if-v-else"><a href="#v-if-v-else-if-v-else" class="headerlink" title="v-if v-else-if  v-else"></a>v-if v-else-if  v-else</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>       为<span class="token boolean">true</span>显示    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>用一个标签控制多个标签的显示隐藏</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>   <span class="token comment" spellcheck="true">//这层div没有意义，但是多出来在理解上不是特别好</span>       <span class="token operator">&lt;</span>div<span class="token operator">></span>我显示了<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span>div<span class="token operator">></span>我也显示了<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>Vue提供了<span class="token operator">&lt;</span>template<span class="token operator">></span>标签。这个标签没有任何意义，微信小程序的block也是。在<span class="token keyword">if</span>的时候可以用到。在渲染后，这个<span class="token operator">&lt;</span>template<span class="token operator">></span>是不存在网页中的。<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>我显示了<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>       <span class="token operator">&lt;</span>div<span class="token operator">></span>我也显示了<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>v-else</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>       显示<span class="token boolean">true</span>的时候    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>       显示<span class="token boolean">false</span>的时候    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>v-else-if</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a == 0"</span><span class="token operator">></span>       显示a为<span class="token number">0</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"a == 1"</span><span class="token operator">></span>       显示a为<span class="token number">1</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>       显示a为其他    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="v-show类似于v-if。但是在template上不生效-w-ﾟДﾟ-w"><a href="#v-show类似于v-if。但是在template上不生效-w-ﾟДﾟ-w" class="headerlink" title="v-show类似于v-if。但是在template上不生效 w(ﾟДﾟ)w"></a>v-show类似于v-if。但是在template上不生效 w(ﾟДﾟ)w</h3><p>和v-if的区别，如果if的条件不成立，是不会渲染进页面的，会用一个注释<!---->代替。<br>而v-show尽管条件不成立，但是在页面结构中还是存在。改变的是css样式display：none。<br>在微信小程序中的规则也差不多。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>       显示a了    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE基础 笔记</title>
      <link href="/2019/08/29/vue-ji-chu-bi-ji/"/>
      <url>/2019/08/29/vue-ji-chu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="VUE基础-实例方法"><a href="#VUE基础-实例方法" class="headerlink" title="VUE基础  实例方法"></a>VUE基础  实例方法</h2><h3 id="对对象和数组的渲染时"><a href="#对对象和数组的渲染时" class="headerlink" title="对对象和数组的渲染时"></a>对对象和数组的渲染时</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>arr<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>            arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>                a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>                b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>                c<span class="token punctuation">:</span> <span class="token string">"c"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果–arr.length，页面是不会进行刷新渲染。<br><img src="./image/长度操作.JPG" alt="操作长度"></p><p>如果通过数组的下标操作也不会改变。<br><img src="./image/下标操作.JPG" alt="操作长度"></p><p>如果使用了一个对象没有的属性值，会返回undefined。在视图中不会显示。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>obj<span class="token punctuation">.</span>yes<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//没有这个属性值，不显示</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>            arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>                a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>                b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>                c<span class="token punctuation">:</span> <span class="token string">"c"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>     </code></pre><p>如果再添加上这个值的话，页面上是不会渲染的。<br><img src="./image/对象操作.JPG" alt="操作长度"></p><h3 id="针对上面的情况可以使用-VUE的-set解决"><a href="#针对上面的情况可以使用-VUE的-set解决" class="headerlink" title="针对上面的情况可以使用 VUE的$set解决"></a>针对上面的情况可以使用 VUE的$set解决</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>arr<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>            arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>                a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>                b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>                c<span class="token punctuation">:</span> <span class="token string">"c"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        </code></pre><p> <img src="./image/$set.JPG" alt="操作长度">  </p><h3 id="el"><a href="#el" class="headerlink" title="$el"></a>$el</h3><p> 通过Vue实例.$el获取操作的元素。<br> app.$el 相当于 document.getElementById(‘app’) </p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>obj<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>            b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>            c<span class="token punctuation">:</span> <span class="token string">"c"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p> <img src="./image/$el.JPG" alt="$el"></p><p>更改数据，然后打印。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>obj<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>            b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>            c<span class="token punctuation">:</span> <span class="token string">"c"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">"aaaa"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">"bbbb"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">"cccc"</span><span class="token punctuation">;</span></code></pre><p>页面上数据已经更改但是，打印的却不一样。<br><img src="./image/$el2.JPG" alt="$el"><br>因为VUE在数据的渲染上面是，异步操作。可利用定时器等操作查看</p><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h3><p>这个方法是在数据渲染完成后，触发这个方法。接受一个参数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>obj<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>            b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>            c<span class="token punctuation">:</span> <span class="token string">"c"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">"aaaa"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">"bbbb"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">"cccc"</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><img src="./image/$nextTick.JPG" alt="$el"></p><h3 id="mount"><a href="#mount" class="headerlink" title="$mount"></a>$mount</h3><p>挂载方法，在实例化一个vue对象时，可以不用写el。<br>在获取这个对象的时候通过$mount添加</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>obj<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//el: "#app",</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        str<span class="token punctuation">:</span> <span class="token string">"str"</span><span class="token punctuation">,</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>            b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>            c<span class="token punctuation">:</span> <span class="token string">"c"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VUE基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 箭头函数</title>
      <link href="/2019/08/13/es6-jian-tou-han-shu/"/>
      <url>/2019/08/13/es6-jian-tou-han-shu/</url>
      
        <content type="html"><![CDATA[<p><font face="黑体" color="green" size="8">ES6箭头函数</font><br><br><br> ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><h3 id="箭头函数的特点"><a href="#箭头函数的特点" class="headerlink" title="箭头函数的特点"></a>箭头函数的特点</h3><pre><code> 1 不能加function关键字 2 只能作为函数使用、没有原型、不能new 3 参数不能重复命名 4 arguments 和 this 由定义时的外层最接近一层的非箭头函数决定</code></pre><h3 id="箭头函数的写法"><a href="#箭头函数的写法" class="headerlink" title="箭头函数的写法"></a>箭头函数的写法</h3><pre class=" language-JavaScript"><code class="language-JavaScript">  let func = (param1,param2) => {      let sum = param1 + param2;      return sum;  }</code></pre><h3 id="与ES5函数写法的不同"><a href="#与ES5函数写法的不同" class="headerlink" title="与ES5函数写法的不同"></a>与ES5函数写法的不同</h3><pre class=" language-JavaScript"><code class="language-JavaScript">    function sum(a, b) {        return a + b;    }    let sum = (a,b) =>{        return a + b;    }    //如果方法体里面只有return ...;可以去掉{}去掉return    let sum = (a,b) => a + b    //当要返回一个对象的时候    let obj = (a,b) => {_a:a,_b:b}   //这样写不可以在es6中 {} 为语句块    let obj = (a,b) => ( {_a:a,_b:b} )  //需要加括号转成表达式    //连续的返回    let sum = (x) => (y) => (z) => x + y + z;    console.log(sum(1)(2)(3));</code></pre><h3 id="箭头函数中this的指向和arguments问题"><a href="#箭头函数中this的指向和arguments问题" class="headerlink" title="箭头函数中this的指向和arguments问题"></a>箭头函数中this的指向和arguments问题</h3><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-箭头函数中使用的this，arguments。是由箭头函数定义时-外层最接近的非箭头函数里的this和arguments决定"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-箭头函数中使用的this，arguments。是由箭头函数定义时-外层最接近的非箭头函数里的this和arguments决定" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;箭头函数中使用的this，arguments。是由箭头函数定义时,外层最接近的非箭头函数里的this和arguments决定"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;箭头函数中使用的this，arguments。是由<font face="黑体" color="#c24106" size="4">箭头函数定义时,外层最接近的非箭头函数里的this和arguments决定</font></h4><pre class=" language-JavaScript"><code class="language-JavaScript">   //这里outerFunc在window下定义   function outerFunc(a,b){       let innerFunc = () =>{           console.log(arguments[0], arguments[1], this);       }       innerFunc();   }   outerFunc(1,2);   //打印结果为： 1  2  window</code></pre><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-如果在外面再套一层"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-如果在外面再套一层" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果在外面再套一层"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果在外面再套一层</h4><pre class=" language-JavaScript"><code class="language-JavaScript">    let obj = {    }    function wrapFunc(c, d) {        function outerFunc(a, b) {            let innerFunc = () => {                console.log(arguments[0], arguments[1], this);            }            //给obj添加方法            obj._innerFunc = innerFunc;        }        outerFunc(1,2);    }    wrapFunc(3,4);    //执行箭头函数    obj._innerFunc(5,6);   结果为 1 2 window还是箭头函数定义时outerFunc(a,b)的this和arguments</code></pre><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-再来"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-再来" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再来"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再来</h4><pre class=" language-JavaScript"><code class="language-JavaScript">   var obj = {        a : function(){            console.log(this);        },        b : () => console.log(this)    }    obj.a();    obj.b();    最后结果为 obj  window</code></pre><h3 id="尾调用-递归（优化过程）"><a href="#尾调用-递归（优化过程）" class="headerlink" title="尾调用 递归（优化过程）"></a>尾调用 递归（优化过程）</h3><pre class=" language-JavaScript"><code class="language-JavaScript">  //p = 1是默认值操作  a = (n,p=1) => {    if(n <= 1){        return 1 * p;    }    let s = n * p;    return a(n-1,s);   }   let sum = a(3)   console.llog(sum) 结果为6</code></pre><h3 id="利用箭头函数对数组进行操作"><a href="#利用箭头函数对数组进行操作" class="headerlink" title="利用箭头函数对数组进行操作"></a>利用箭头函数对数组进行操作</h3><pre class=" language-JavaScript"><code class="language-JavaScript">     let arr = [25, 64, 45, 123, 456, 845, 78];     //相对于es5来说简单了不少     console.log(arr.map((ele) => ele < 50));     console.log(arr.filter((ele) => ele > 50));</code></pre>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 箭头函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js线程问题</title>
      <link href="/2019/08/08/js-xian-cheng-wen-ti/"/>
      <url>/2019/08/08/js-xian-cheng-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="js是单线程语言"><a href="#js是单线程语言" class="headerlink" title="js是单线程语言"></a>js是单线程语言</h2><p>这个单线程是有影响的。比如上一句代码没有执行到，那么下一句就不会执行，浏览器就会显示一直在加载。</p><pre class=" language-JavaScript"><code class="language-JavaScript">for(var i = 0;i<10;i++){    console.log(i);}console.log("yes");打印顺序就是for循环走完后，再打印yes</code></pre><p>但是在开发中是有一些耗时操作的，比如ajax请求，定时器等等。这个时候出现了异步模式。</p><pre class=" language-JavaScript"><code class="language-JavaScript">setTimeout(function(){    console.log("我是定时器一号");},200);setTimeout(function(){    console.log("我是定时器二号");},100);console.log("yes");setTimeout是异步操作，这些耗时操作不是在js主线程里面执行，而是放到了任务队列（可以理解为是异步线程）里面去。等到主线程执行完后再来执行任务队列里面的事情，并且是挨个处理。所以这里打印的是 yes  我是定时器二号  我是定时器一号在js中，定时器 ajax请求 事件 回调函数 发布订阅模式 es6中的Promise、Generrator等等都是异步操作。</code></pre><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>相当于一个列表，里面的任务又分为宏任务、微任务。<br>任务队列的读取方式：先进先出 后进后出。</p><h3 id="宏任务-task-macrotask"><a href="#宏任务-task-macrotask" class="headerlink" title="宏任务 task(macrotask)"></a>宏任务 task(macrotask)</h3><p> 1.DOM操作 2.定时器 3.ajax…</p><h3 id="微任务-task-macrotask"><a href="#微任务-task-macrotask" class="headerlink" title="微任务 task(macrotask)"></a>微任务 task(macrotask)</h3><p> 1.Promise 2.</p><pre class=" language-JavaScript"><code class="language-JavaScript">后放入宏任务中setTimeout(function(){    console.log("我是定时器一号");},200);先放入宏任务中setTimeout(function(){    console.log("我是定时器二号");},100);放入call stack（函数执行栈，代码执行放入里面）中的Global EC（函数执行上下文）中。console.log("yes");函数执行是在Global EC里执行在Global EC 只有console.log("yes");  执行，然后先看微任务中有没有。有的话将任务加到Global EC中先后执行再弹出call stack，看完微任务后看宏任务，再添加执行。</code></pre><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>例子1</p><pre class=" language-JavaScript"><code class="language-JavaScript">setTimeout(function(){    console.log("定时器1");},200);setTimeout(function(){    console.log("定时器2");},100);es6中的Promisenew Promise(function(resolve){    console.log("Promise1");       resolve();    console.log("Promise2");  }).then(function(){    console.log("then");})console.log("yes");最后打印顺序为    Promise1 Promise2 yes then 定时器2 定时器1</code></pre><p>例子2</p><pre class=" language-JavaScript"><code class="language-JavaScript">setTimeout(function(){    console.log("1")},100)new Promise(function(resolve){  console.log(2)  for(var i = 0; i < 601;i++){      i === 600 && resolve(3);  }  console.log(4)}).then(function(val){  console.log(val)})console.log(5)最后打印顺序为 24531</code></pre><h2 id="利用任务队列解决问题"><a href="#利用任务队列解决问题" class="headerlink" title="利用任务队列解决问题"></a>利用任务队列解决问题</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>js是单线程语言，异步操作放到任务队列里面。而任务队列分为宏任务和微任务。<br>最后执行先执行Global EC里面的，然后是微任务里面的，最后是宏任务里面的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js基础 线程 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo server无效</title>
      <link href="/2019/08/08/hexo-server-wu-xiao/"/>
      <url>/2019/08/08/hexo-server-wu-xiao/</url>
      
        <content type="html"><![CDATA[<p><a href="./ckrj.JPG"><img src="./ckrj.JPG" alt="采坑日记.png"></a><br> 因为hexo基于node 没有安装依赖需要执行 <code>npm install</code><br> <code>npm install</code> 会去找项目文件夹中的 <code>package.json</code> 这个文件安装里面的配置</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 采坑日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
